import { InjectionToken } from '@angular/core';
import * as _moment from 'moment';
/**
 * @internal
 */
let moment = _moment;
/* istanbul ignore if */
if ('default' in _moment) {
    moment = _moment['default'];
}
/**
 * InjectionToken for string dates that can be used to override default model format.
 **/
export const DL_DATE_TIME_DISPLAY_FORMAT = new InjectionToken('DL_DATE_TIME_DISPLAY_FORMAT');
/**
 * `Moment`'s long date format `lll` used as the default output format
 * for string date's
 */
export const DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT = moment.localeData().longDateFormat('lll');
/**
 * InjectionToken for string dates that can be used to override default input formats.
 **/
export const DL_DATE_TIME_INPUT_FORMATS = new InjectionToken('DL_DATE__TIME_INPUT_FORMATS');
/**
 *  Default input format's used by `DlDateAdapterString`
 */
export const DL_DATE_TIME_INPUT_FORMATS_DEFAULT = [
    'YYYY-MM-DDTHH:mm',
    'YYYY-MM-DDTHH:mm:ss',
    'YYYY-MM-DDTHH:mm:ss.SSS',
    'YYYY-MM-DD',
    'M/D/YYYY h:m:s A',
    'M/D/YYYY h:m A',
    'M/D/YYYY h:m A',
    'M/D/YYYY',
    'M/D/YY h:m:s A',
    'M/D/YY h:m A',
    'M/D/YY h A',
    'M/D/YY',
    DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT,
    moment.ISO_8601,
];
/**
 * InjectionToken for string dates that can be used to override default model format.
 **/
export const DL_DATE_TIME_MODEL_FORMAT = new InjectionToken('DL_DATE_TIME_MODEL_FORMAT');
/**
 *  Default model format (ISO 8601)`
 */
export const DL_DATE_TIME_MODEL_FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ss.SSSZ';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGwtZGF0ZS10aW1lLXN0cmluZy1mb3JtYXQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWJvb3RzdHJhcC1kYXRldGltZXBpY2tlci8iLCJzb3VyY2VzIjpbImNvcmUvZGwtZGF0ZS10aW1lLXN0cmluZy1mb3JtYXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUU3QyxPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUVsQzs7R0FFRztBQUNILElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUNyQix3QkFBd0I7QUFDeEIsSUFBSSxTQUFTLElBQUksT0FBTyxFQUFFO0lBQ3hCLE1BQU0sR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7Q0FDN0I7QUFFRDs7SUFFSTtBQUNKLE1BQU0sQ0FBQyxNQUFNLDJCQUEyQixHQUFHLElBQUksY0FBYyxDQUFTLDZCQUE2QixDQUFDLENBQUM7QUFFckc7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sbUNBQW1DLEdBQUcsTUFBTSxDQUFDLFVBQVUsRUFBRSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUU3Rjs7SUFFSTtBQUNKLE1BQU0sQ0FBQyxNQUFNLDBCQUEwQixHQUFHLElBQUksY0FBYyxDQUFXLDZCQUE2QixDQUFDLENBQUM7QUFFdEc7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxrQ0FBa0MsR0FBRztJQUNoRCxrQkFBa0I7SUFDbEIscUJBQXFCO0lBQ3JCLHlCQUF5QjtJQUN6QixZQUFZO0lBQ1osa0JBQWtCO0lBQ2xCLGdCQUFnQjtJQUNoQixnQkFBZ0I7SUFDaEIsVUFBVTtJQUNWLGdCQUFnQjtJQUNoQixjQUFjO0lBQ2QsWUFBWTtJQUNaLFFBQVE7SUFDUixtQ0FBbUM7SUFDbkMsTUFBTSxDQUFDLFFBQVE7Q0FDaEIsQ0FBQztBQUVGOztJQUVJO0FBQ0osTUFBTSxDQUFDLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxjQUFjLENBQVMsMkJBQTJCLENBQUMsQ0FBQztBQUVqRzs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHLDBCQUEwQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3Rpb25Ub2tlbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCAqIGFzIF9tb21lbnQgZnJvbSAnbW9tZW50JztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xubGV0IG1vbWVudCA9IF9tb21lbnQ7XG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmICgnZGVmYXVsdCcgaW4gX21vbWVudCkge1xuICBtb21lbnQgPSBfbW9tZW50WydkZWZhdWx0J107XG59XG5cbi8qKlxuICogSW5qZWN0aW9uVG9rZW4gZm9yIHN0cmluZyBkYXRlcyB0aGF0IGNhbiBiZSB1c2VkIHRvIG92ZXJyaWRlIGRlZmF1bHQgbW9kZWwgZm9ybWF0LlxuICoqL1xuZXhwb3J0IGNvbnN0IERMX0RBVEVfVElNRV9ESVNQTEFZX0ZPUk1BVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdETF9EQVRFX1RJTUVfRElTUExBWV9GT1JNQVQnKTtcblxuLyoqXG4gKiBgTW9tZW50YCdzIGxvbmcgZGF0ZSBmb3JtYXQgYGxsbGAgdXNlZCBhcyB0aGUgZGVmYXVsdCBvdXRwdXQgZm9ybWF0XG4gKiBmb3Igc3RyaW5nIGRhdGUnc1xuICovXG5leHBvcnQgY29uc3QgRExfREFURV9USU1FX0RJU1BMQVlfRk9STUFUX0RFRkFVTFQgPSBtb21lbnQubG9jYWxlRGF0YSgpLmxvbmdEYXRlRm9ybWF0KCdsbGwnKTtcblxuLyoqXG4gKiBJbmplY3Rpb25Ub2tlbiBmb3Igc3RyaW5nIGRhdGVzIHRoYXQgY2FuIGJlIHVzZWQgdG8gb3ZlcnJpZGUgZGVmYXVsdCBpbnB1dCBmb3JtYXRzLlxuICoqL1xuZXhwb3J0IGNvbnN0IERMX0RBVEVfVElNRV9JTlBVVF9GT1JNQVRTID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZ1tdPignRExfREFURV9fVElNRV9JTlBVVF9GT1JNQVRTJyk7XG5cbi8qKlxuICogIERlZmF1bHQgaW5wdXQgZm9ybWF0J3MgdXNlZCBieSBgRGxEYXRlQWRhcHRlclN0cmluZ2BcbiAqL1xuZXhwb3J0IGNvbnN0IERMX0RBVEVfVElNRV9JTlBVVF9GT1JNQVRTX0RFRkFVTFQgPSBbXG4gICdZWVlZLU1NLUREVEhIOm1tJyxcbiAgJ1lZWVktTU0tRERUSEg6bW06c3MnLFxuICAnWVlZWS1NTS1ERFRISDptbTpzcy5TU1MnLFxuICAnWVlZWS1NTS1ERCcsXG4gICdNL0QvWVlZWSBoOm06cyBBJyxcbiAgJ00vRC9ZWVlZIGg6bSBBJyxcbiAgJ00vRC9ZWVlZIGg6bSBBJyxcbiAgJ00vRC9ZWVlZJyxcbiAgJ00vRC9ZWSBoOm06cyBBJyxcbiAgJ00vRC9ZWSBoOm0gQScsXG4gICdNL0QvWVkgaCBBJyxcbiAgJ00vRC9ZWScsXG4gIERMX0RBVEVfVElNRV9ESVNQTEFZX0ZPUk1BVF9ERUZBVUxULFxuICBtb21lbnQuSVNPXzg2MDEsXG5dO1xuXG4vKipcbiAqIEluamVjdGlvblRva2VuIGZvciBzdHJpbmcgZGF0ZXMgdGhhdCBjYW4gYmUgdXNlZCB0byBvdmVycmlkZSBkZWZhdWx0IG1vZGVsIGZvcm1hdC5cbiAqKi9cbmV4cG9ydCBjb25zdCBETF9EQVRFX1RJTUVfTU9ERUxfRk9STUFUID0gbmV3IEluamVjdGlvblRva2VuPHN0cmluZz4oJ0RMX0RBVEVfVElNRV9NT0RFTF9GT1JNQVQnKTtcblxuLyoqXG4gKiAgRGVmYXVsdCBtb2RlbCBmb3JtYXQgKElTTyA4NjAxKWBcbiAqL1xuZXhwb3J0IGNvbnN0IERMX0RBVEVfVElNRV9NT0RFTF9GT1JNQVRfREVGQVVMVCA9ICdZWVlZLU1NLUREVEhIOm1tOnNzLlNTU1onO1xuIl19