{"version":3,"file":"dl-model-provider-minute.d.ts","sources":["dl-model-provider-minute.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\nimport { SimpleChanges } from '@angular/core';\nimport { DlDateTimePickerModel } from './dl-date-time-picker-model';\nimport { DlModelProvider } from './dl-model-provider';\n/**\n * Default implementation for the `minute` view.\n */\nexport declare class DlMinuteModelProvider implements DlModelProvider {\n    private step;\n    /**\n     * Receives `minuteStep` configuration changes detected by Angular.\n     *\n     * Changes where the value has not changed are ignored.\n     *\n     * Setting `minuteStep` to `null` or `undefined` will result in a\n     * minuteStep of `5`.\n     *\n     * @param changes\n     *  the input changes detected by Angular.\n     */\n    onChanges(changes: SimpleChanges): void;\n    /**\n     * Returns the `minute` model for the specified moment in `local` time with the\n     * `active` minute set to the beginning of the hour.\n     *\n     * The `minute` model represents an hour (60 minutes) as three rows with four columns\n     * and each cell representing 5-minute increments.\n     *\n     * The hour always starts at midnight.\n     *\n     * Each cell represents a 5-minute increment starting at midnight.\n     *\n     * The `active` minute will be the 5-minute increments less than or equal to the specified milliseconds.\n     *\n     * @param milliseconds\n     *  the moment in time from which the minute model will be created.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  the model representing the specified moment in time.\n     */\n    getModel(milliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the active `minute` one row `down` from the specified moment in time.\n     *\n     * Moving `down` can result in the `active` minute being part of a different hour than\n     * the specified `fromMilliseconds`, in this case the hour represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `minute` model `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `minute` one row `down` from the specified moment in time.\n     */\n    goDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the active `minute` one row `down` from the specified moment in time.\n     *\n     * Moving `down` can result in the `active` minute being part of a different hour than\n     * the specified `fromMilliseconds`, in this case the hour represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `minute` model `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `minute` one row `down` from the specified moment in time.\n     */\n    goUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the `active` date one cell to `left` in the current `minute` view.\n     *\n     * Moving `left` can result in the `active` hour being part of a different hour than\n     * the specified `fromMilliseconds`, in this case the hour represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `minute` model to the `left` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `minute` one cell to the `left` of the specified moment in time.\n     */\n    goLeft(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move `active` minute one cell to `right` in the current `minute` view.\n     *\n     * Moving `right` can result in the `active` hour being part of a different hour than\n     * the specified `fromMilliseconds`, in this case the hour represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `minute` model to the `right` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `minute` one cell to the `right` of the specified moment in time.\n     */\n    goRight(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the active `minute` one hour `down` from the specified moment in time.\n     *\n     * The `active` minute will be `one (1) hour after` the specified milliseconds.\n     * This moves the `active` date one `page` `down` from the current `minute` view.\n     *\n     * The next cell `page-down` will be in a different hour than the currently\n     * displayed view and the model time range will include the new active cell.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `month` model page `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one year `down` from the specified moment in time.\n     */\n    pageDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the active `minute` one hour `up` from the specified moment in time.\n     *\n     * The `active` minute will be `one (1) hour before` the specified milliseconds.\n     * This moves the `active` date one `page` `down` from the current `minute` view.\n     *\n     * The next cell `page-up` will be in a different hour than the currently\n     * displayed view and the model time range will include the new active cell.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `month` model page `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `month` one year `down` from the specified moment in time.\n     */\n    pageUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the `active` `minute` to the last cell of the current hour.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different hour than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the last cell will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the last cell in the view as the active `minute`.\n     */\n    goEnd(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the `active` `minute` to the first cell of the current hour.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different hour than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the first cell will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the first cell in the view as the active `minute`.\n     */\n    goHome(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n}\n"]}