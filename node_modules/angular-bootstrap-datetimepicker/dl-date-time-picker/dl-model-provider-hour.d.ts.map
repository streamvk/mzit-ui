{"version":3,"file":"dl-model-provider-hour.d.ts","sources":["dl-model-provider-hour.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\nimport { SimpleChanges } from '@angular/core';\nimport { DlDateTimePickerModel } from './dl-date-time-picker-model';\nimport { DlModelProvider } from './dl-model-provider';\n/**\n * Default implementation for the `hour` view.\n */\nexport declare class DlHourModelProvider implements DlModelProvider {\n    /**\n     * Receives input changes detected by Angular.\n     *\n     * @param changes\n     *  the input changes detected by Angular.\n     */\n    onChanges(changes: SimpleChanges): void;\n    /**\n     * Returns the `hour` model for the specified moment in `local` time with the\n     * `active` hour set to the beginning of the day.\n     *\n     * The `hour` model represents a day (24 hours) as six rows with four columns\n     * and each cell representing one-hour increments.\n     *\n     * The hour always starts at the beginning of the hour.\n     *\n     * Each cell represents a one-hour increment starting at midnight.\n     *\n     * @param milliseconds\n     *  the moment in time from which the minute model will be created.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  the model representing the specified moment in time.\n     */\n    getModel(milliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the active `hour` one row `down` from the specified moment in time.\n     *\n     * Moving `down` can result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`, in this case the day represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `hour` model `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one row `down` from the specified moment in time.\n     */\n    goDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the active `hour` one row `up` from the specified moment in time.\n     *\n     * Moving `up` can result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`, in this case the day represented by the model\n     * will change to show the correct hour.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `hour` model `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one row `up` from the specified moment in time.\n     */\n    goUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the `active` hour one cell `left` in the current `hour` view.\n     *\n     * Moving `left` can result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`, in this case the day represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `hour` model to the `left` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one cell to the `left` of the specified moment in time.\n     */\n    goLeft(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the `active` hour one cell `right` in the current `hour` view.\n     *\n     * Moving `right` can result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`, in this case the day represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the `hour` model to the `right` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one cell to the `right` of the specified moment in time.\n     */\n    goRight(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the active `hour` one day `down` from the specified moment in time.\n     *\n     * Paging `down` will result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`. As a result, the day represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `hour` model page `down` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one day `down` from the specified moment in time.\n     */\n    pageDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the active `hour` one day `up` from the specified moment in time.\n     *\n     * Paging `up` will result in the `active` hour being part of a different day than\n     * the specified `fromMilliseconds`. As a result, the day represented by the model\n     * will change to show the correct year.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which the next `hour` model page `up` will be constructed.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  model containing an `active` `hour` one day `up` from the specified moment in time.\n     */\n    pageUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the `active` `hour` to `11:00 pm` of the current day.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different day than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which `11:00 pm` will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the `11:00 pm` cell in the view as the active `hour`.\n     */\n    goEnd(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n    /**\n     * Move the `active` `hour` to `midnight` of the current day.\n     *\n     * The view or time range will not change unless the `fromMilliseconds` value\n     * is in a different day than the displayed decade.\n     *\n     * @param fromMilliseconds\n     *  the moment in time from which `midnight` will be calculated.\n     * @param selectedMilliseconds\n     *  the current value of the date/time picker.\n     * @returns\n     *  a model with the `midnight` cell in the view as the active `hour`.\n     */\n    goHome(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel;\n}\n"]}