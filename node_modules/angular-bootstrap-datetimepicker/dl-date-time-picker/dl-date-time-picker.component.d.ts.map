{"version":3,"file":"dl-date-time-picker.component.d.ts","sources":["dl-date-time-picker.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\nimport { ElementRef, EventEmitter, NgZone, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { DlDateAdapter } from '../core/public-api';\nimport { DlDateTimePickerChange } from './dl-date-time-picker-change';\nimport { DateButton } from './dl-date-time-picker-date-button';\nimport { DlDateTimePickerModel } from './dl-date-time-picker-model';\nimport { DlDayModelProvider } from './dl-model-provider-day';\nimport { DlHourModelProvider } from './dl-model-provider-hour';\nimport { DlMinuteModelProvider } from './dl-model-provider-minute';\nimport { DlMonthModelProvider } from './dl-model-provider-month';\nimport { DlYearModelProvider } from './dl-model-provider-year';\n/**\n * Component that provides all of the user facing functionality of the date/time picker.\n */\nexport declare class DlDateTimePickerComponent<D> implements OnChanges, OnInit, ControlValueAccessor {\n    private _elementRef;\n    private _ngZone;\n    private _dateAdapter;\n    private yearModelComponent;\n    private monthModelComponent;\n    private dayModelComponent;\n    private hourModelComponent;\n    private minuteModelComponent;\n    /**\n     * Change listener callback functions registered\n     * via `registerOnChange`\n     * @internal\n     **/\n    private _changed;\n    /**\n     * Model for the current view.\n     *\n     * @internal\n     **/\n    _model: DlDateTimePickerModel;\n    /**\n     * Maps view name to the next view (the view for the next smallest increment of time).\n     * @internal\n     **/\n    private _nextView;\n    /**\n     * Maps view name to the previous view (the view for the next largest increment of time).\n     * @internal\n     **/\n    private _previousView;\n    /**\n     * Touch listener callback functions registered\n     * via `registerOnChange`\n     * @internal\n     **/\n    private _touched;\n    /**\n     * Stores the selected value for this picker.\n     * @internal\n     **/\n    private _value;\n    /**\n     * Maps view name to the model provider for that view.\n     * @internal\n     **/\n    private readonly _viewToModelProvider;\n    /**\n     * Emits when a `change` event when date/time is selected or\n     * the value of the date/time picker changes.\n     **/\n    readonly change: EventEmitter<DlDateTimePickerChange<D>>;\n    /**\n     * Specifies the classes used to display the left icon.\n     *\n     * This component uses OPENICONIC https://useiconic.com/open\n     * by default but any icon library may be used.\n     */\n    leftIconClass: string | string[] | Set<string> | {};\n    /**\n     * The highest view that the date/time picker can show.\n     * Setting this to a view less than year could make it more\n     * difficult for the end-user to navigate to certain dates.\n     */\n    maxView: 'year' | 'month' | 'day' | 'hour' | 'minute';\n    /**\n     * The view that will be used for date/time selection.\n     *\n     * The default of `minute  means that selection will not happen\n     * until the end-user clicks on a cell in the minute view.\n     *\n     * for example, if you want the end-user to select a only day (date),\n     * setting `minView` to `day` will cause selection to happen when the\n     * end-user selects a cell in the day view.\n     *\n     * NOTE: This must be set lower than or equal to `startView'\n     */\n    minView: 'year' | 'month' | 'day' | 'hour' | 'minute';\n    /**\n     * The number of minutes between each `.dl-abdtp-minute` button.\n     *\n     * Must be greater than `0` and less than `60`.\n     */\n    minuteStep: number;\n    /**\n     * Specifies the classes used to display the right icon.\n     *\n     * This component uses OPENICONIC https://useiconic.com/open\n     * by default but any icon library may be used.\n     */\n    rightIconClass: string[];\n    /**\n     *  Determine whether or not the `DateButton` is selectable by the end user.\n     */\n    selectFilter: (dateButton: DateButton, viewName: string) => boolean;\n    /**\n     *  Start at the view containing startDate when no value is selected.\n     */\n    startDate: number;\n    /**\n     * The initial view that the date/time picker will show.\n     * The picker will also return to this view after a date/time\n     * is selected.\n     *\n     * NOTE: This must be set lower than or equal to `maxView'\n     */\n    startView: 'year' | 'month' | 'day' | 'hour' | 'minute';\n    /**\n     * Specifies the classes used to display the up icon.\n     *\n     * This component uses OPENICONIC https://useiconic.com/open\n     * by default but any icon library may be used.\n     */\n    upIconClass: string[];\n    /**\n     * Used to construct a new instance of a date/time picker.\n     *\n     * @param _elementRef\n     *  reference to this element.\n     * @param _ngZone\n     *  reference to an NgZone instance used to select the active element outside of angular.\n     * @param _dateAdapter\n     *  date adapter for the date type in the model.\n     * @param yearModelComponent\n     *  provider for the year view model.\n     * @param monthModelComponent\n     *  provider for the month view model.\n     * @param dayModelComponent\n     *  provider for the day view model.\n     * @param hourModelComponent\n     *  provider for the hour view model.\n     * @param minuteModelComponent\n     *  provider for the minute view model.\n     */\n    constructor(_elementRef: ElementRef, _ngZone: NgZone, _dateAdapter: DlDateAdapter<D>, yearModelComponent: DlYearModelProvider, monthModelComponent: DlMonthModelProvider, dayModelComponent: DlDayModelProvider, hourModelComponent: DlHourModelProvider, minuteModelComponent: DlMinuteModelProvider);\n    /**\n     * Set's the model for the current view after applying the selection filter.\n     *\n     * @internal\n     **/\n    private model;\n    /**\n     * Returns `D` value of the date/time picker or undefined/null if no value is set.\n     **/\n    /**\n    * Sets value of the date/time picker and emits a change event if the\n    * new value is different from the previous value.\n    **/\n    value: D;\n    /**\n     * Returns `milliseconds` value of the date/time picker or undefined/null if no value is set.\n     **/\n    readonly valueOf: number | null;\n    /**\n     * Applies the `selectionFilter` by adding the `dl-abdtp-disabled`\n     * class to any `DateButton` where `selectFilter` returned false.\n     *\n     * @param model\n     *  the new model\n     *\n     * @returns\n     *  the supplied model with zero or more `DateButton`'s\n     *  having the `dl-abdtp-disabled` class set to `true` if the\n     *  selection for that date should be disabled.\n     *\n     * @internal\n     */\n    private applySelectFilter;\n    /**\n     * Focuses the `.dl-abdtp-active` cell after the microtask queue is empty.\n     * @internal\n     **/\n    private focusActiveCell;\n    /**\n     * Determines the start date for the picker.\n     * @internal\n     **/\n    private getStartDate;\n    /**\n     * Determine the start view for the picker\n     * @returns\n     *  the largest time increment view between the `minView` or `minute` view and the `startView` or `day` view.\n     */\n    private getStartView;\n    /**\n     * Calls all registered `touch` callback functions.\n     * @internal\n     **/\n    private onTouch;\n    /**\n     * Receives configuration changes detected by Angular and passes the changes on\n     * to the model providers so the provider is aware of any necessary configuration\n     * changes (i.e. minuteStep)\n     *\n     * @param changes\n     *  the input changes detected by Angular.\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Sets the initial model.\n     *\n     * @internal\n     **/\n    ngOnInit(): void;\n    /**\n     * Handles click (and enter & space key down) events on the date elements.\n     *\n     * If the current view is the minimum view then the date value is selected\n     * and the picker returns to the start view.\n     *\n     * Otherwise the picker displays the next view with the next\n     * smallest time increment.\n     *\n     * @internal\n     **/\n    _onDateClick(dateButton: DateButton): void;\n    /**\n     * Handles click (and enter & space key down) events on the left button.\n     *\n     * Changes the displayed time range of the picker to the previous time range.\n     * For example, in year view, the previous decade is displayed.\n     *\n     * @internal\n     **/\n    _onLeftClick(): void;\n    /**\n     * Handles click (and enter & space key down) events on the up button.\n     *\n     * Changes the view of the picker to the next largest time increment.\n     * For example, in day view, the next view displayed will be month view.\n     *\n     * @internal\n     **/\n    _onUpClick(): void;\n    /**\n     * Handles click (and enter & space key down) events on the right button.\n     *\n     * Changes the displayed time range of the picker to the next time range.\n     * For example, in year view, the next decade is displayed.\n     *\n     * @internal\n     **/\n    _onRightClick(): void;\n    /**\n     * Handles various key down events to move the `active date` around the calendar.\n     *\n     * @internal\n     **/\n    _handleKeyDown($event: KeyboardEvent): void;\n    /**\n     * Implements ControlValueAccessor.registerOnChange to register change listeners.\n     * @internal\n     **/\n    registerOnChange(fn: (value: D) => void): void;\n    /**\n     * Implements ControlValueAccessor.registerOnTouched to register touch listeners.\n     * @internal\n     **/\n    registerOnTouched(fn: () => void): void;\n    /**\n     * Implements ControlValueAccessor.writeValue to store the value from the model.\n     * @internal\n     **/\n    writeValue(value: D): void;\n}\n"]}