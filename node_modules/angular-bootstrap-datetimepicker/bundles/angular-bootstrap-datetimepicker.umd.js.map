{"version":3,"file":"angular-bootstrap-datetimepicker.umd.js","sources":["../../node_modules/tslib/tslib.es6.js","ng://angular-bootstrap-datetimepicker/core/dl-date-adapter.ts","ng://angular-bootstrap-datetimepicker/core/dl-date-adapter-moment.ts","ng://angular-bootstrap-datetimepicker/core/dl-date-adapter-native.ts","ng://angular-bootstrap-datetimepicker/core/dl-date-adapter-number.ts","ng://angular-bootstrap-datetimepicker/core/dl-date-time-string-format.ts","ng://angular-bootstrap-datetimepicker/core/dl-date-adapter-string.ts","ng://angular-bootstrap-datetimepicker/core/dl-date-time-core.module.ts","ng://angular-bootstrap-datetimepicker/core/public-api.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-input/dl-date-time-input-change.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-input/dl-date-time-input.directive.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-input/dl-date-time-input.module.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-input/public-api.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-picker/dl-date-time-picker-change.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-picker/dl-model-provider-day.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-picker/dl-model-provider-hour.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-picker/dl-model-provider-minute.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-picker/dl-model-provider-month.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-picker/dl-model-provider-year.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-picker/dl-date-time-picker.component.ts","ng://angular-bootstrap-datetimepicker/dl-date-time-picker/dl-date-time-picker.module.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Determines the model type of the Date/Time picker another type.\n */\nexport abstract class DlDateAdapter<D> {\n\n  /**\n   * Create a new instance of a `D` type from milliseconds.\n   * @param milliseconds\n   *  a moment in time value as milliseconds (local time zone)\n   * @returns\n   *  an instance of `D` for the specified moment in time.\n   */\n  abstract fromMilliseconds(milliseconds: number): D;\n\n  /**\n   * Returns a moment in time value as milliseconds (local time zone).\n   * @param value\n   *  a moment in time value as `D` or `null`.\n   * @returns\n   *  a moment in` for the specified value or `null`\n   */\n  abstract toMilliseconds(value: D | null): number | null;\n}\n","import * as _moment from 'moment';\nimport {Moment} from 'moment';\nimport {DlDateAdapter} from './dl-date-adapter';\n\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\nconst moment = _moment;\n\n/**\n * Adapts `moment` to be usable as a date by date/time components that work with dates.\n **/\nexport class DlDateAdapterMoment extends DlDateAdapter<Moment> {\n\n  /**\n   * Create a new instance of a `moment` type from milliseconds.\n   * @param milliseconds\n   *  a time value as milliseconds (local time zone)\n   * @returns\n   *  an instance of `moment` for the specified moment in time.\n   */\n  fromMilliseconds(milliseconds: number): Moment {\n    return moment(milliseconds);\n  }\n\n  /**\n   * Returns a moment in time value as milliseconds (local time zone).\n   * @param value\n   *  a moment or `null`.\n   * @returns\n   *  a `moment.valueOf()` result for the specified `moment` or `null`\n   */\n  toMilliseconds(value: Moment | null): number | null {\n    return (value) ? value.valueOf() : undefined;\n  }\n}\n","import {DlDateAdapter} from './dl-date-adapter';\n\n/**\n * Adapts `Date` to be usable as a date by date/time components that work with dates.\n **/\nexport class DlDateAdapterNative extends DlDateAdapter<Date> {\n  /**\n   * Create a new instance of a `moment` type from milliseconds.\n   * @param milliseconds\n   *  a time value as milliseconds (local time zone)\n   * @returns\n   *  an instance of `moment` for the specified moment in time.\n   */\n  fromMilliseconds(milliseconds: number): Date {\n    return new Date(milliseconds);\n  }\n\n\n  /**\n   * Returns a moment in time value as milliseconds (local time zone).\n   * @param value\n   *  a Date or null.\n   * @returns\n   *  a `value.getTime()` result for the specified `Date` or `null`.\n   */\n  toMilliseconds(value: Date | null): number | null {\n    return (value) ? value.getTime() : undefined;\n  }\n}\n","import {DlDateAdapter} from './dl-date-adapter';\n\n/**\n * Adapts `number` to be usable as a date by date/time components that work with dates.\n * No op adapter.\n **/\nexport class DlDateAdapterNumber extends DlDateAdapter<number> {\n  /**\n   * Returns the specified number.\n   * @param milliseconds\n   *  a moment time time.\n   * @returns\n   *  the specified moment in time.\n   */\n  fromMilliseconds(milliseconds: number): number {\n    return milliseconds;\n  }\n\n  /**\n   * Returns the specified number.\n   * @param value\n   *  a moment time time or `null`\n   * @returns\n   *  the specified moment in time or `null`\n   */\n  toMilliseconds(value: number | null): number | null {\n    return value;\n  }\n}\n","import {InjectionToken} from '@angular/core';\n\nimport * as _moment from 'moment';\n\n/**\n * @internal\n */\nlet moment = _moment;\n/* istanbul ignore if */\nif ('default' in _moment) {\n  moment = _moment['default'];\n}\n\n/**\n * InjectionToken for string dates that can be used to override default model format.\n **/\nexport const DL_DATE_TIME_DISPLAY_FORMAT = new InjectionToken<string>('DL_DATE_TIME_DISPLAY_FORMAT');\n\n/**\n * `Moment`'s long date format `lll` used as the default output format\n * for string date's\n */\nexport const DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT = moment.localeData().longDateFormat('lll');\n\n/**\n * InjectionToken for string dates that can be used to override default input formats.\n **/\nexport const DL_DATE_TIME_INPUT_FORMATS = new InjectionToken<string[]>('DL_DATE__TIME_INPUT_FORMATS');\n\n/**\n *  Default input format's used by `DlDateAdapterString`\n */\nexport const DL_DATE_TIME_INPUT_FORMATS_DEFAULT = [\n  'YYYY-MM-DDTHH:mm',\n  'YYYY-MM-DDTHH:mm:ss',\n  'YYYY-MM-DDTHH:mm:ss.SSS',\n  'YYYY-MM-DD',\n  'M/D/YYYY h:m:s A',\n  'M/D/YYYY h:m A',\n  'M/D/YYYY h:m A',\n  'M/D/YYYY',\n  'M/D/YY h:m:s A',\n  'M/D/YY h:m A',\n  'M/D/YY h A',\n  'M/D/YY',\n  DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT,\n  moment.ISO_8601,\n];\n\n/**\n * InjectionToken for string dates that can be used to override default model format.\n **/\nexport const DL_DATE_TIME_MODEL_FORMAT = new InjectionToken<string>('DL_DATE_TIME_MODEL_FORMAT');\n\n/**\n *  Default model format (ISO 8601)`\n */\nexport const DL_DATE_TIME_MODEL_FORMAT_DEFAULT = 'YYYY-MM-DDTHH:mm:ss.SSSZ';\n","import {Inject} from '@angular/core';\nimport * as _moment from 'moment';\nimport {DlDateAdapter} from './dl-date-adapter';\nimport {DL_DATE_TIME_INPUT_FORMATS, DL_DATE_TIME_MODEL_FORMAT} from './dl-date-time-string-format';\n\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n *\n **/\nconst moment = _moment;\n\n/**\n * Adapts `string` to be usable as a date by date/time components that work with dates.\n **/\nexport class DlDateAdapterString extends DlDateAdapter<string> {\n\n  private readonly inputFormats: string[];\n  private readonly modelFormat: string;\n\n  /**\n   *  Constructs a new instance of this class.\n   *\n   * @param inputFormats\n   *  see {@link DL_DATE_TIME_INPUT_FORMATS}\n   * @param modelFormat\n   *  see {@link DL_DATE_TIME_MODEL_FORMAT}\n   */\n  constructor(@Inject(DL_DATE_TIME_INPUT_FORMATS) inputFormats: string[],\n              @Inject(DL_DATE_TIME_MODEL_FORMAT) modelFormat: string) {\n    super();\n    this.inputFormats = inputFormats;\n    this.modelFormat = modelFormat;\n  }\n\n  /**\n   * Returns the specified number.\n   * @param milliseconds\n   *  a moment time time.\n   * @returns\n   *  the specified moment in time.\n   */\n  fromMilliseconds(milliseconds: number): string {\n    return moment(milliseconds).format(this.modelFormat);\n  }\n\n  /**\n   * Returns the specified number.\n   * @param value\n   *  a moment time time or `null`\n   * @returns\n   *  the milliseconds for the specified value or `null`\n   *  `null` is returned when value is not a valid input date string\n   */\n  toMilliseconds(value: string | null): number | null {\n    if (value !== undefined && value !== null) {\n      const newMoment = moment(value, this.inputFormats, true);\n      return newMoment.isValid() ? newMoment.valueOf() : undefined;\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {DlDateAdapter} from './dl-date-adapter';\nimport {DlDateAdapterMoment} from './dl-date-adapter-moment';\nimport {DlDateAdapterNative} from './dl-date-adapter-native';\nimport {DlDateAdapterNumber} from './dl-date-adapter-number';\nimport {DlDateAdapterString} from './dl-date-adapter-string';\nimport {\n  DL_DATE_TIME_DISPLAY_FORMAT,\n  DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT,\n  DL_DATE_TIME_INPUT_FORMATS,\n  DL_DATE_TIME_INPUT_FORMATS_DEFAULT,\n  DL_DATE_TIME_MODEL_FORMAT,\n  DL_DATE_TIME_MODEL_FORMAT_DEFAULT\n} from './dl-date-time-string-format';\n\n/**\n * Import this module to supply your own `DateAdapter` provider.\n * @internal\n **/\n@NgModule({\n  providers: [\n    {provide: DL_DATE_TIME_DISPLAY_FORMAT, useValue: DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT},\n    {provide: DL_DATE_TIME_INPUT_FORMATS, useValue: DL_DATE_TIME_INPUT_FORMATS_DEFAULT},\n    {provide: DL_DATE_TIME_MODEL_FORMAT, useValue: DL_DATE_TIME_MODEL_FORMAT_DEFAULT}\n  ]\n})\nexport class DlDateTimeCoreModule {\n}\n\n/**\n * Import this module to store `milliseconds` in the model.\n * @internal\n */\n@NgModule({\n  imports: [DlDateTimeCoreModule],\n  providers: [\n    {provide: DlDateAdapter, useClass: DlDateAdapterNumber}\n  ],\n  exports: [DlDateTimeCoreModule]\n})\nexport class DlDateTimeNumberModule {\n}\n\n/**\n * Import this module to store a native JavaScript `Date` in the model.\n * @internal\n */\n@NgModule({\n  imports: [DlDateTimeCoreModule],\n  providers: [\n    {provide: DlDateAdapter, useClass: DlDateAdapterNative}\n  ],\n})\nexport class DlDateTimeDateModule {\n}\n\n/**\n * Import this module to store a `moment` in the model.\n * @internal\n */\n@NgModule({\n  imports: [DlDateTimeCoreModule],\n  providers: [\n    {provide: DlDateAdapter, useClass: DlDateAdapterMoment}\n  ],\n})\nexport class DlDateTimeMomentModule {\n}\n\n/**\n * Import this module to store a `string` in the model.\n * @internal\n */\n@NgModule({\n  imports: [DlDateTimeCoreModule],\n  providers: [\n    {provide: DL_DATE_TIME_INPUT_FORMATS, useValue: DL_DATE_TIME_INPUT_FORMATS_DEFAULT},\n    {provide: DL_DATE_TIME_MODEL_FORMAT, useValue: DL_DATE_TIME_DISPLAY_FORMAT_DEFAULT},\n    {provide: DlDateAdapter, useClass: DlDateAdapterString}\n  ],\n})\nexport class DlDateTimeStringModule {\n}\n\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nexport * from './dl-date-adapter';\nexport * from './dl-date-adapter-moment';\nexport * from './dl-date-adapter-native';\nexport * from './dl-date-adapter-number';\nexport * from './dl-date-adapter-string';\nexport * from './dl-date-time-core.module';\nexport * from './dl-date-time-string-format';\n\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\n/**\n * Emitted when the value of a date/time input changes.\n */\nexport class DlDateTimeInputChange<D> {\n\n  /**\n   * The new value of the picker.\n   */\n  private readonly _value: D;\n\n  /**\n   * Constructs a new instance.\n   * @param newValue\n   *  the new value of the date/time picker.\n   */\n  constructor(newValue: D) {\n    this._value = newValue;\n  }\n\n  /**\n   * Get the new value of the date/time picker.\n   * @returns the new value or null.\n   */\n  get value(): D {\n    return this._value;\n  }\n}\n","import {Directive, ElementRef, EventEmitter, HostListener, Inject, Input, Output, Renderer2} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport * as _moment from 'moment';\nimport {DL_DATE_TIME_DISPLAY_FORMAT, DL_DATE_TIME_INPUT_FORMATS, DlDateAdapter} from '../core/public-api';\nimport {DlDateTimeInputChange} from './dl-date-time-input-change';\n\n/**\n * @internal\n */\nconst moment = _moment;\n\n/**\n *  This directive allows the user to enter dates, using the keyboard, into an input box and\n *  angular will then store a date value in the model.\n *\n *  The input format(s), display format, and model format are independent and fully customizable.\n */\n@Directive({\n  selector: 'input[dlDateTimeInput]',\n  providers: [\n    {provide: NG_VALUE_ACCESSOR, useExisting:  DlDateTimeInputDirective, multi: true},\n    {provide: NG_VALIDATORS, useExisting:  DlDateTimeInputDirective, multi: true}\n  ]\n})\nexport class DlDateTimeInputDirective<D> implements ControlValueAccessor, Validator {\n\n  /* tslint:disable:member-ordering */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    // @ts-ignore\n    return (this._inputFilter || (() => true))(this._value) ?\n      null : {'dlDateTimeInputFilter': {'value': control.value}};\n  }\n  private _inputFilter: (value: (D | null)) => boolean = () => true;\n  private _isValid = true;\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._isValid ?\n      null : {'dlDateTimeInputParse': {'text': this._elementRef.nativeElement.value}};\n  }\n  private _changed: ((value: D) => void)[] = [];\n  private _touched: (() => void)[] = [];\n  private _validator = Validators.compose([this._parseValidator, this._filterValidator]);\n  private _onValidatorChange: () => void = () => {};\n  private _value: D | undefined = undefined;\n\n  /**\n   * Emits when a `change` event when date/time is selected or\n   * the value of the date/time picker changes.\n   **/\n  @Output()\n  readonly dateChange = new EventEmitter<DlDateTimeInputChange<D>>();\n\n  /**\n   * Constructs a new instance of this directive.\n   * @param _renderer\n   *  reference to the renderer.\n   * @param _elementRef\n   *  reference to this element.\n   * @param _dateAdapter\n   *  date adapter for the date type in the model.\n   * @param _displayFormat\n   *  from `DL_DATE_TIME_DISPLAY_FORMAT`, which defines the format to use for a valid date/time value.\n   * @param _inputFormats\n   *  from `DL_DATE_TIME_INPUT_FORMATS`, which defines the input formats that allowed as valid date/time values.\n   *  NB: moment is always in strict parse mode for this directive.\n   */\n  constructor(\n    private _renderer: Renderer2,\n    private _elementRef: ElementRef,\n    private _dateAdapter: DlDateAdapter<D>,\n    @Inject(DL_DATE_TIME_DISPLAY_FORMAT) private readonly _displayFormat: string,\n    @Inject(DL_DATE_TIME_INPUT_FORMATS) private readonly _inputFormats: string[]\n  ) {}\n\n  /**\n   * Set a function used to determine whether or not the `value` entered by the user is allowed.\n   * @param inputFilterFunction\n   *   a function that returns `true` if the `value` entered by the user is allowed, otherwise `false`.\n   */\n  @Input()\n  set dlDateTimeInputFilter(inputFilterFunction: (value: D | null) => boolean) {\n    this._inputFilter = inputFilterFunction || (() => true);\n    this._onValidatorChange();\n  }\n\n  /* tslint:enable:member-ordering */\n\n  /**\n   * Returns `D` value of the date/time input or `undefined` | `null` if no value is set.\n   **/\n  get value(): D {\n    return this._value;\n  }\n\n  /**\n   * Set the value of the date/time input to a value of `D` | `undefined` | `null`;\n   * @param newValue\n   *  the new value of the date/time input\n   */\n\n  set value(newValue: D | null | undefined) {\n    if (newValue !== this._value) {\n      this._value = newValue;\n      this._changed.forEach(onChanged => onChanged(this._value));\n    }\n  }\n\n  /**\n   * Emit a `change` event when the value of the input changes.\n   */\n  @HostListener('change') _onChange() {\n    this.dateChange.emit(new DlDateTimeInputChange(this._value));\n  }\n\n  /**\n   * Format the input text using {@link DL_DATE_TIME_DISPLAY_FORMAT} and mark the control as touched.\n   */\n  @HostListener('blur') _onBlur() {\n    if (this._value) {\n      this._setElementValue(this._value);\n    }\n    this._touched.forEach(onTouched => onTouched());\n  }\n\n  /**\n   * Parse the user input into a possibly valid date.\n   * The model value is not set if the input is NOT one of the {@link DL_DATE_TIME_INPUT_FORMATS}.\n   * @param value\n   *   Value of the input control.\n   */\n  @HostListener('input', ['$event.target.value']) _onInput(value: string | null | undefined): void {\n    const testDate = value === null || value === undefined || value === ''\n      ? undefined\n      : moment(value, this._inputFormats, true);\n\n    this._isValid = testDate && testDate.isValid();\n    this.value = this._isValid ? this._dateAdapter.fromMilliseconds(testDate.valueOf()) : undefined;\n  }\n\n  /**\n   * @internal\n   */\n  private _setElementValue(value: D) {\n    if (value !== null && value !== undefined) {\n      this._renderer.setProperty(this._elementRef.nativeElement, 'value', moment(value).format(this._displayFormat));\n    }\n  }\n\n  /**\n   * @internal\n   */\n  registerOnChange(onChange: (value: any) => void): void {\n    this._changed.push(onChange);\n  }\n\n  /**\n   * @internal\n   */\n  registerOnTouched(onTouched: () => void): void {\n    this._touched.push(onTouched);\n  }\n\n  /**\n   * @internal\n   */\n  registerOnValidatorChange(validatorOnChange: () => void): void {\n    this._onValidatorChange = validatorOnChange;\n  }\n\n  /**\n   * @internal\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n  }\n\n  /**\n   * @internal\n   */\n  validate(control: AbstractControl): ValidationErrors | null {\n    return this._validator(control);\n  }\n\n  /**\n   * @internal\n   */\n  writeValue(value: D): void {\n    this._isValid = true;\n    this.value = value;\n    this._setElementValue(value);\n  }\n}\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {DlDateTimeInputDirective} from './dl-date-time-input.directive';\n\n/**\n * Import this module to allow date/time input.\n * @internal\n **/\n@NgModule({\n  declarations: [DlDateTimeInputDirective],\n  imports: [CommonModule],\n  exports: [DlDateTimeInputDirective],\n})\nexport class DlDateTimeInputModule {\n}\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nexport * from './dl-date-time-input-change';\nexport * from './dl-date-time-input.directive';\nexport * from './dl-date-time-input.module';\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\n/**\n * Emitted when the value of a date/time picker changes.\n */\nexport class DlDateTimePickerChange<D> {\n\n  /**\n   * The new value of the picker.\n   */\n  private readonly _value: D;\n\n  /**\n   * Constructs a new instance.\n   * @param newValue\n   *  the new value of the date/time picker.\n   */\n  constructor(newValue: D) {\n    this._value = newValue;\n  }\n\n  /**\n   * Get the new value of the date/time picker.\n   * @returns the new value or null.\n   */\n  get value(): D {\n    return this._value;\n  }\n}\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nimport {SimpleChanges} from '@angular/core';\nimport * as _moment from 'moment';\nimport {DlDateTimePickerModel} from './dl-date-time-picker-model';\nimport {DlModelProvider} from './dl-model-provider';\n\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\nconst moment = _moment;\n\n/**\n * Default implementation for the `day` view.\n */\nexport class DlDayModelProvider implements DlModelProvider {\n\n  /**\n   * Receives input changes detected by Angular.\n   *\n   * @param changes\n   *  the input changes detected by Angular.\n   */\n  onChanges(\n    // @ts-ignore\n    changes: SimpleChanges\n  ): void {}\n\n  /**\n   * Returns the `day` model for the specified moment in `local` time with the\n   * `active` day set to the first day of the month.\n   *\n   * The `day` model represents a month (42 days) as six rows with seven columns\n   * and each cell representing one-day increments.\n   *\n   * The `day` always starts at midnight.\n   *\n   * Each cell represents a one-day increment at midnight.\n   *\n   * @param milliseconds\n   *  the moment in time from which the minute model will be created.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  the model representing the specified moment in time.\n   */\n  getModel(milliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n\n    const startOfMonth = moment(milliseconds).startOf('month');\n    const endOfMonth = moment(milliseconds).endOf('month');\n    const startOfView = moment(startOfMonth).subtract(Math.abs(startOfMonth.weekday()), 'days');\n\n    const rowNumbers = [0, 1, 2, 3, 4, 5];\n    const columnNumbers = [0, 1, 2, 3, 4, 5, 6];\n\n    const previousMonth = moment(startOfMonth).subtract(1, 'month');\n    const nextMonth = moment(startOfMonth).add(1, 'month');\n    const activeValue = moment(milliseconds).startOf('day').valueOf();\n    const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n      ? selectedMilliseconds\n      : moment(selectedMilliseconds).startOf('day').valueOf();\n\n    return {\n      viewName: 'day',\n      viewLabel: startOfMonth.format('MMM YYYY'),\n      activeDate: activeValue,\n      leftButton: {\n        value: previousMonth.valueOf(),\n        ariaLabel: `Go to ${previousMonth.format('MMM YYYY')}`,\n        classes: {},\n      },\n      upButton: {\n        value: startOfMonth.valueOf(),\n        ariaLabel: `Go to month view`,\n        classes: {},\n      },\n      rightButton: {\n        value: nextMonth.valueOf(),\n        ariaLabel: `Go to ${nextMonth.format('MMM YYYY')}`,\n        classes: {},\n      },\n      rowLabels: columnNumbers.map((column) => moment().weekday(column).format('dd')),\n      rows: rowNumbers.map(rowOfDays)\n    };\n\n    function rowOfDays(rowNumber) {\n      const currentMoment = moment();\n      const cells = columnNumbers.map((columnNumber) => {\n        const dayMoment = moment(startOfView).add((rowNumber * columnNumbers.length) + columnNumber, 'days');\n        return {\n          display: dayMoment.format('D'),\n          ariaLabel: dayMoment.format('ll'),\n          value: dayMoment.valueOf(),\n          classes: {\n            'dl-abdtp-active': activeValue === dayMoment.valueOf(),\n            'dl-abdtp-future': dayMoment.isAfter(endOfMonth),\n            'dl-abdtp-past': dayMoment.isBefore(startOfMonth),\n            'dl-abdtp-selected': selectedValue === dayMoment.valueOf(),\n            'dl-abdtp-now': dayMoment.isSame(currentMoment, 'day'),\n          }\n        };\n      });\n      return {cells};\n    }\n  }\n\n  /**\n   * Move the active `day` one row `down` from the specified moment in time.\n   *\n   * Moving `down` can result in the `active` day being part of a different month than\n   * the specified `fromMilliseconds`, in this case the month represented by the model\n   * will change to show the correct hour.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `day` model `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `day` one row `down` from the specified moment in time.\n   */\n  goDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(7, 'days').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `day` one row `up` from the specified moment in time.\n   *\n   * Moving `up` can result in the `active` day being part of a different month than\n   * the specified `fromMilliseconds`, in this case the month represented by the model\n   * will change to show the correct hour.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `day` model `up` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `day` one row `up` from the specified moment in time.\n   */\n  goUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(7, 'days').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` day one cell `left` in the current `day` view.\n   *\n   * Moving `left` can result in the `active` day being part of a different month than\n   * the specified `fromMilliseconds`, in this case the month represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `day` model to the `left` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `day` one cell to the `left` of the specified moment in time.\n   */\n  goLeft(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(1, 'day').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` day one cell `right` in the current `day` view.\n   *\n   * Moving `right` can result in the `active` day being part of a different month than\n   * the specified `fromMilliseconds`, in this case the month represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `day` model to the `right` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `day` one cell to the `right` of the specified moment in time.\n   */\n  goRight(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(1, 'day').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `day` one month `down` from the specified moment in time.\n   *\n   * Paging `down` will result in the `active` day being part of a different month than\n   * the specified `fromMilliseconds`. As a result, the month represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `day` model page `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `day` one month `down` from the specified moment in time.\n   */\n  pageDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(1, 'month').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `day` one month `up` from the specified moment in time.\n   *\n   * Paging `up` will result in the `active` day being part of a different month than\n   * the specified `fromMilliseconds`. As a result, the month represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `day` model page `up` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `day` one month `up` from the specified moment in time.\n   */\n  pageUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(1, 'month').valueOf(), selectedMilliseconds);\n  }\n\n\n  /**\n   * Move the `active` `day` to the last day of the month.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different day than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the last day of the month will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the last cell in the view as the active `day`.\n   */\n  goEnd(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds)\n      .endOf('month').startOf('day').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `day` to the first day of the month.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different day than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the first day of the month will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the first cell in the view as the active `day`.\n   */\n  goHome(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).startOf('month').valueOf(), selectedMilliseconds);\n  }\n}\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nimport {SimpleChanges} from '@angular/core';\nimport * as _moment from 'moment';\nimport {DlDateTimePickerModel} from './dl-date-time-picker-model';\nimport {DlModelProvider} from './dl-model-provider';\n\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\nconst moment = _moment;\n\n/**\n * Default implementation for the `hour` view.\n */\nexport class DlHourModelProvider implements DlModelProvider {\n\n  /**\n   * Receives input changes detected by Angular.\n   *\n   * @param changes\n   *  the input changes detected by Angular.\n   */\n  onChanges(\n    // @ts-ignore\n    changes: SimpleChanges\n  ): void {}\n\n\n  /**\n   * Returns the `hour` model for the specified moment in `local` time with the\n   * `active` hour set to the beginning of the day.\n   *\n   * The `hour` model represents a day (24 hours) as six rows with four columns\n   * and each cell representing one-hour increments.\n   *\n   * The hour always starts at the beginning of the hour.\n   *\n   * Each cell represents a one-hour increment starting at midnight.\n   *\n   * @param milliseconds\n   *  the moment in time from which the minute model will be created.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  the model representing the specified moment in time.\n   */\n  getModel(milliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    const startDate = moment(milliseconds).startOf('day');\n\n    const rowNumbers = [0, 1, 2, 3, 4, 5];\n    const columnNumbers = [0, 1, 2, 3];\n\n    const previousDay = moment(startDate).subtract(1, 'day');\n    const nextDay = moment(startDate).add(1, 'day');\n    const activeValue = moment(milliseconds).startOf('hour').valueOf();\n    const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n      ? selectedMilliseconds\n      : moment(selectedMilliseconds).startOf('hour').valueOf();\n\n    return {\n      viewName: 'hour',\n      viewLabel: startDate.format('ll'),\n      activeDate: activeValue,\n      leftButton: {\n        value: previousDay.valueOf(),\n        ariaLabel: `Go to ${previousDay.format('ll')}`,\n        classes: {},\n      },\n      upButton: {\n        value: startDate.valueOf(),\n        ariaLabel: `Go to ${startDate.format('MMM YYYY')}`,\n        classes: {},\n      },\n      rightButton: {\n        value: nextDay.valueOf(),\n        ariaLabel: `Go to ${nextDay.format('ll')}`,\n        classes: {},\n      },\n      rows: rowNumbers.map(rowOfHours)\n    };\n\n    function rowOfHours(rowNumber) {\n\n      const currentMoment = moment();\n      const cells = columnNumbers.map((columnNumber) => {\n        const hourMoment = moment(startDate).add((rowNumber * columnNumbers.length) + columnNumber, 'hours');\n        return {\n          display: hourMoment.format('LT'),\n          ariaLabel: hourMoment.format('LLL'),\n          value: hourMoment.valueOf(),\n          classes: {\n            'dl-abdtp-active': activeValue === hourMoment.valueOf(),\n            'dl-abdtp-selected': selectedValue === hourMoment.valueOf(),\n            'dl-abdtp-now': hourMoment.isSame(currentMoment, 'hour'),\n          }\n        };\n      });\n      return {cells};\n    }\n  }\n\n  /**\n   * Move the active `hour` one row `down` from the specified moment in time.\n   *\n   * Moving `down` can result in the `active` hour being part of a different day than\n   * the specified `fromMilliseconds`, in this case the day represented by the model\n   * will change to show the correct hour.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `hour` model `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `hour` one row `down` from the specified moment in time.\n   */\n  goDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(4, 'hour').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `hour` one row `up` from the specified moment in time.\n   *\n   * Moving `up` can result in the `active` hour being part of a different day than\n   * the specified `fromMilliseconds`, in this case the day represented by the model\n   * will change to show the correct hour.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `hour` model `up` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `hour` one row `up` from the specified moment in time.\n   */\n  goUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(4, 'hour').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` hour one cell `left` in the current `hour` view.\n   *\n   * Moving `left` can result in the `active` hour being part of a different day than\n   * the specified `fromMilliseconds`, in this case the day represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `hour` model to the `left` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `hour` one cell to the `left` of the specified moment in time.\n   */\n  goLeft(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(1, 'hour').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` hour one cell `right` in the current `hour` view.\n   *\n   * Moving `right` can result in the `active` hour being part of a different day than\n   * the specified `fromMilliseconds`, in this case the day represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `hour` model to the `right` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `hour` one cell to the `right` of the specified moment in time.\n   */\n  goRight(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(1, 'hour').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `hour` one day `down` from the specified moment in time.\n   *\n   * Paging `down` will result in the `active` hour being part of a different day than\n   * the specified `fromMilliseconds`. As a result, the day represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `hour` model page `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `hour` one day `down` from the specified moment in time.\n   */\n  pageDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(1, 'day').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `hour` one day `up` from the specified moment in time.\n   *\n   * Paging `up` will result in the `active` hour being part of a different day than\n   * the specified `fromMilliseconds`. As a result, the day represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `hour` model page `up` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `hour` one day `up` from the specified moment in time.\n   */\n  pageUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(1, 'day').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `hour` to `11:00 pm` of the current day.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different day than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which `11:00 pm` will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the `11:00 pm` cell in the view as the active `hour`.\n   */\n  goEnd(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment\n    (fromMilliseconds)\n      .endOf('day')\n      .startOf('hour')\n      .valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `hour` to `midnight` of the current day.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different day than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which `midnight` will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the `midnight` cell in the view as the active `hour`.\n   */\n  goHome(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).startOf('day').valueOf(), selectedMilliseconds);\n  }\n}\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nimport {SimpleChanges} from '@angular/core';\nimport * as _moment from 'moment';\nimport {DlDateTimePickerModel} from './dl-date-time-picker-model';\nimport {DlModelProvider} from './dl-model-provider';\n\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\nconst moment = _moment;\n\n/**\n * Default implementation for the `minute` view.\n */\nexport class DlMinuteModelProvider implements DlModelProvider {\n\n  private step = 5;\n\n  /**\n   * Receives `minuteStep` configuration changes detected by Angular.\n   *\n   * Changes where the value has not changed are ignored.\n   *\n   * Setting `minuteStep` to `null` or `undefined` will result in a\n   * minuteStep of `5`.\n   *\n   * @param changes\n   *  the input changes detected by Angular.\n   */\n\n  onChanges(changes: SimpleChanges): void {\n\n    const minuteStepChange = changes['minuteStep'];\n\n    if (minuteStepChange\n      && (minuteStepChange.previousValue !== minuteStepChange.currentValue)\n    ) {\n      this.step = minuteStepChange.currentValue;\n      if (this.step === null || this.step === undefined) {\n        this.step = 5;\n      }\n    }\n  }\n\n\n  /**\n   * Returns the `minute` model for the specified moment in `local` time with the\n   * `active` minute set to the beginning of the hour.\n   *\n   * The `minute` model represents an hour (60 minutes) as three rows with four columns\n   * and each cell representing 5-minute increments.\n   *\n   * The hour always starts at midnight.\n   *\n   * Each cell represents a 5-minute increment starting at midnight.\n   *\n   * The `active` minute will be the 5-minute increments less than or equal to the specified milliseconds.\n   *\n   * @param milliseconds\n   *  the moment in time from which the minute model will be created.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  the model representing the specified moment in time.\n   */\n  getModel(milliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    const startDate = moment(milliseconds).startOf('hour');\n    const currentMilliseconds = moment().valueOf();\n\n    const minuteSteps = new Array(Math.ceil(60 / this.step)).fill(0).map((zero, index) => zero + index * this.step);\n    const minuteValues = minuteSteps.map((minutesToAdd) => moment(startDate).add(minutesToAdd, 'minutes').valueOf());\n    const activeValue = moment(minuteValues.filter((value) => value <= milliseconds).pop()).valueOf();\n\n    const nowValue = currentMilliseconds >= startDate.valueOf() && currentMilliseconds <= moment(startDate).endOf('hour').valueOf()\n      ? moment(minuteValues.filter((value) => value <= currentMilliseconds).pop()).valueOf()\n      : null;\n\n\n    const previousHour = moment(startDate).subtract(1, 'hour');\n    const nextHour = moment(startDate).add(1, 'hour');\n    const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n      ? selectedMilliseconds\n      : moment(minuteValues.filter((value) => value <= selectedMilliseconds).pop()).valueOf();\n\n    const rows = new Array(Math.ceil(minuteSteps.length / 4))\n      .fill(0)\n      .map((zero, index) => zero + index)\n      .map((value) => {\n        return {cells: minuteSteps.slice((value * 4), (value * 4) + 4).map(rowOfMinutes)};\n      });\n\n    return {\n      viewName: 'minute',\n      viewLabel: startDate.format('lll'),\n      activeDate: activeValue,\n      leftButton: {\n        value: previousHour.valueOf(),\n        ariaLabel: `Go to ${previousHour.format('lll')}`,\n        classes: {},\n      },\n      upButton: {\n        value: startDate.valueOf(),\n        ariaLabel: `Go to ${startDate.format('ll')}`,\n        classes: {},\n      },\n      rightButton: {\n        value: nextHour.valueOf(),\n        ariaLabel: `Go to ${nextHour.format('lll')}`,\n        classes: {},\n      },\n      rows\n    };\n\n    function rowOfMinutes(stepMinutes): {\n      display: string;\n      ariaLabel: string;\n      value: number;\n      classes: {};\n    } {\n      const minuteMoment = moment(startDate).add(stepMinutes, 'minutes');\n      return {\n        display: minuteMoment.format('LT'),\n        ariaLabel: minuteMoment.format('LLL'),\n        value: minuteMoment.valueOf(),\n        classes: {\n          'dl-abdtp-active': activeValue === minuteMoment.valueOf(),\n          'dl-abdtp-selected': selectedValue === minuteMoment.valueOf(),\n          'dl-abdtp-now': nowValue === minuteMoment.valueOf(),\n        }\n      };\n    }\n  }\n\n  /**\n   * Move the active `minute` one row `down` from the specified moment in time.\n   *\n   * Moving `down` can result in the `active` minute being part of a different hour than\n   * the specified `fromMilliseconds`, in this case the hour represented by the model\n   * will change to show the correct hour.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `minute` model `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `minute` one row `down` from the specified moment in time.\n   */\n  goDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(this.step * 4, 'minutes').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `minute` one row `down` from the specified moment in time.\n   *\n   * Moving `down` can result in the `active` minute being part of a different hour than\n   * the specified `fromMilliseconds`, in this case the hour represented by the model\n   * will change to show the correct hour.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `minute` model `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `minute` one row `down` from the specified moment in time.\n   */\n  goUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(this.step * 4, 'minutes').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` date one cell to `left` in the current `minute` view.\n   *\n   * Moving `left` can result in the `active` hour being part of a different hour than\n   * the specified `fromMilliseconds`, in this case the hour represented by the model\n   * will change to show the correct hour.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `minute` model to the `left` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `minute` one cell to the `left` of the specified moment in time.\n   */\n  goLeft(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(this.step, 'minutes').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move `active` minute one cell to `right` in the current `minute` view.\n   *\n   * Moving `right` can result in the `active` hour being part of a different hour than\n   * the specified `fromMilliseconds`, in this case the hour represented by the model\n   * will change to show the correct hour.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `minute` model to the `right` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `minute` one cell to the `right` of the specified moment in time.\n   */\n  goRight(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(this.step, 'minutes').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `minute` one hour `down` from the specified moment in time.\n   *\n   * The `active` minute will be `one (1) hour after` the specified milliseconds.\n   * This moves the `active` date one `page` `down` from the current `minute` view.\n   *\n   * The next cell `page-down` will be in a different hour than the currently\n   * displayed view and the model time range will include the new active cell.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `month` model page `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `month` one year `down` from the specified moment in time.\n   */\n  pageDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(1, 'hour').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `minute` one hour `up` from the specified moment in time.\n   *\n   * The `active` minute will be `one (1) hour before` the specified milliseconds.\n   * This moves the `active` date one `page` `down` from the current `minute` view.\n   *\n   * The next cell `page-up` will be in a different hour than the currently\n   * displayed view and the model time range will include the new active cell.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `month` model page `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `month` one year `down` from the specified moment in time.\n   */\n  pageUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(1, 'hour').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `minute` to the last cell of the current hour.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different hour than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the last cell will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the last cell in the view as the active `minute`.\n   */\n  goEnd(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds)\n      .endOf('hour')\n      .valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `minute` to the first cell of the current hour.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different hour than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the first cell will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the first cell in the view as the active `minute`.\n   */\n  goHome(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).startOf('hour').valueOf(), selectedMilliseconds);\n  }\n}\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nimport {SimpleChanges} from '@angular/core';\nimport * as _moment from 'moment';\nimport {DlDateTimePickerModel} from './dl-date-time-picker-model';\nimport {DlModelProvider} from './dl-model-provider';\n\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\nconst moment = _moment;\n\n/**\n * Default implementation for the `month` view.\n */\nexport class DlMonthModelProvider implements DlModelProvider {\n\n  /**\n   * Receives input changes detected by Angular.\n   *\n   * @param changes\n   *  the input changes detected by Angular.\n   */\n  onChanges(\n    // @ts-ignore\n    changes: SimpleChanges\n  ): void {}\n\n  /**\n   * Returns the `month` model for the specified moment in `local` time with the\n   * `active` month set to the first day of the specified month.\n   *\n   * The `month` model represents a year (12 months) as three rows with four columns.\n   *\n   * The year always starts in January.\n   *\n   * Each cell represents midnight on the 1st day of the month.\n   *\n   * The `active` month will be the January of year of the specified milliseconds.\n   *\n   * @param milliseconds\n   *  the moment in time from which the month model will be created.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  the model representing the specified moment in time.\n   */\n  getModel(milliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    const startDate = moment(milliseconds).startOf('year');\n\n    const rowNumbers = [0, 1, 2];\n    const columnNumbers = [0, 1, 2, 3];\n\n    const previousYear = moment(startDate).subtract(1, 'year');\n    const nextYear = moment(startDate).add(1, 'year');\n    const activeValue = moment(milliseconds).startOf('month').valueOf();\n    const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n      ? selectedMilliseconds\n      : moment(selectedMilliseconds).startOf('month').valueOf();\n\n    return {\n      viewName: 'month',\n      viewLabel: startDate.format('YYYY'),\n      activeDate: activeValue,\n      leftButton: {\n        value: previousYear.valueOf(),\n        ariaLabel: `Go to ${previousYear.format('YYYY')}`,\n        classes: {},\n      },\n      upButton: {\n        value: startDate.valueOf(),\n        ariaLabel: `Go to ${startDate.format('YYYY')}`,\n        classes: {},\n      },\n      rightButton: {\n        value: nextYear.valueOf(),\n        ariaLabel: `Go to ${nextYear.format('YYYY')}`,\n        classes: {},\n      },\n      rows: rowNumbers.map(rowOfMonths)\n    };\n\n    function rowOfMonths(rowNumber) {\n\n      const currentMoment = moment();\n      const cells = columnNumbers.map((columnNumber) => {\n        const monthMoment = moment(startDate).add((rowNumber * columnNumbers.length) + columnNumber, 'months');\n        return {\n          display: monthMoment.format('MMM'),\n          ariaLabel: monthMoment.format('MMM YYYY'),\n          value: monthMoment.valueOf(),\n          classes: {\n            'dl-abdtp-active': activeValue === monthMoment.valueOf(),\n            'dl-abdtp-selected': selectedValue === monthMoment.valueOf(),\n            'dl-abdtp-now': monthMoment.isSame(currentMoment, 'month'),\n          }\n        };\n      });\n      return {cells};\n    }\n  }\n\n  /**\n   * Move the active `month` one row `down` from the specified moment in time.\n   *\n   * Moving `down` can result in the `active` month being part of a different year than\n   * the specified `fromMilliseconds`, in this case the year represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `month` model `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `month` one row `down` from the specified moment in time.\n   */\n  goDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(4, 'month').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `month` one row `up` from the specified moment in time.\n   *\n   * Moving `up` can result in the `active` month being part of a different year than\n   * the specified `fromMilliseconds`, in this case the year represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the previous `month` model `up` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `month` one row `up` from the specified moment in time.\n   */\n  goUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(4, 'month').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `month` one (1) month to the `left` of the specified moment in time.\n   *\n   * Moving `left` can result in the `active` month being part of a different year than\n   * the specified `fromMilliseconds`, in this case the year represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `month` model to the `left` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `month` one month to the `left` of the specified moment in time.\n   */\n  goLeft(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(1, 'month').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `month` one (1) month to the `right` of the specified moment in time.\n   *\n   * The `active` month will be `one (1) month after` the specified milliseconds.\n   * This moves the `active` date one month `right` in the current `month` view.\n   *\n   * Moving `right` can result in the `active` month being part of a different year than\n   * the specified `fromMilliseconds`, in this case the year represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `month` model to the `right` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `month` one year to the `right` of the specified moment in time.\n   */\n  goRight(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(1, 'month').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `month` one year `down` from the specified moment in time.\n   *\n   * Paging `down` will result in the `active` month being part of a different year than\n   * the specified `fromMilliseconds`. As a result, the year represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `month` model page `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `month` one year `down` from the specified moment in time.\n   */\n  pageDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(12, 'months').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `month` one year `down` from the specified moment in time.\n   *\n   * Paging `up` will result in the `active` month being part of a different year than\n   * the specified `fromMilliseconds`. As a result, the year represented by the model\n   * will change to show the correct year.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `month` model page `up` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `month` one year `up` from the specified moment in time.\n   */\n  pageUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(12, 'months').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `month` to `December` of the current year.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different year than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which `December 1` will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the `December` cell in the view as the active `month`.\n   */\n  goEnd(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).endOf('year').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `month` to `January` of the current year.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different year than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which `January 1` will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the `January` cell in the view as the active `month`.\n   */\n  goHome(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).startOf('year').valueOf(), selectedMilliseconds);\n  }\n}\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nimport {SimpleChanges} from '@angular/core';\nimport * as _moment from 'moment';\nimport {Moment} from 'moment';\nimport {DlDateTimePickerModel} from './dl-date-time-picker-model';\nimport {DlModelProvider} from './dl-model-provider';\n\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\nconst moment = _moment;\n\n/**\n * Default implementation for the `year` view.\n */\nexport class DlYearModelProvider implements DlModelProvider {\n\n  /**\n   * Create a moment at midnight january 1 at the start of the current decade.\n   * The start of the decade is always a year ending in zero.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the start of the decade will be determined.\n   * @returns\n   *  moment at midnight january 1 at the start of the current decade.\n   * @internal\n   */\n  private static getStartOfDecade(fromMilliseconds: number): Moment {\n    // Truncate the last digit from the current year to get the start of the decade\n    const startDecade = (Math.trunc(moment(fromMilliseconds).year() / 10) * 10);\n    return moment({year: startDecade}).startOf('year');\n  }\n\n  /**\n   * Receives input changes detected by Angular.\n   *\n   * @param changes\n   *  the input changes detected by Angular.\n   */\n  onChanges(\n    // @ts-ignore\n    changes: SimpleChanges\n  ): void {}\n\n  /**\n   * Returns the `year` model for the specified moment in `local` time with the\n   * `active` year set to January 1 of the specified year.\n   *\n   * The `year` model represents a decade (10 years) as two rows with five columns.\n   *\n   * The decade always starts on a year ending with zero.\n   *\n   * Each cell represents midnight January 1 of the indicated year.\n   *\n   * The `active` year will be the January 1 of year of the specified milliseconds.\n   *\n   * @param milliseconds\n   *  the moment in time from which the year model will be created.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  the model representing the specified moment in time.\n   */\n  getModel(milliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    const rowNumbers = [0, 1];\n    const columnNumbers = [0, 1, 2, 3, 4];\n\n    const startYear = moment(milliseconds).startOf('year');\n    const startDate = DlYearModelProvider.getStartOfDecade(milliseconds);\n\n    const futureYear = startDate.year() + 9;\n    const pastYear = startDate.year();\n    const activeValue = startYear.valueOf();\n    const selectedValue = selectedMilliseconds === null || selectedMilliseconds === undefined\n      ? selectedMilliseconds\n      : moment(selectedMilliseconds).startOf('year').valueOf();\n\n    return {\n      viewName: 'year',\n      viewLabel: `${pastYear}-${futureYear}`,\n      activeDate: activeValue,\n      leftButton: {\n        value: moment(startDate).subtract(10, 'years').valueOf(),\n        ariaLabel: `Go to ${pastYear - 10}-${pastYear - 1}`,\n        classes: {},\n      },\n      rightButton: {\n        value: moment(startDate).add(10, 'years').valueOf(),\n        ariaLabel: `Go to ${futureYear + 1}-${futureYear + 10}`,\n        classes: {},\n      },\n      rows: rowNumbers.map(rowOfYears.bind(this))\n    };\n\n    function rowOfYears(rowNumber) {\n\n      const currentMoment = moment();\n      const cells = columnNumbers.map((columnNumber) => {\n        const yearMoment = moment(startDate).add((rowNumber * columnNumbers.length) + columnNumber, 'years');\n        return {\n          display: yearMoment.format('YYYY'),\n          value: yearMoment.valueOf(),\n          classes: {\n            'dl-abdtp-active': activeValue === yearMoment.valueOf(),\n            'dl-abdtp-selected': selectedValue === yearMoment.valueOf(),\n            'dl-abdtp-now': yearMoment.isSame(currentMoment, 'year'),\n          }\n        };\n      });\n      return {cells};\n    }\n  }\n\n  /**\n   * Move the active `year` one row `down` from the specified moment in time.\n   *\n   * The `active` year will be the January 1 `five (5) years after` the specified milliseconds.\n   * This moves the `active` date one row `down` in the current `year` view.\n   *\n   * Moving `down` can result in the `active` year being part of a different decade than\n   * the specified `fromMilliseconds`, in this case the decade represented by the model\n   * will change to show the correct decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `year` model `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `year` one row `down` from the specified moment in time.\n   */\n  goDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(5, 'year').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `year` one row `up` from the specified moment in time.\n   *\n   * The `active` year will be the January 1 `five (5) years before` the specified milliseconds.\n   * This moves the `active` date one row `up` in the current `year` view.\n   *\n   * Moving `up` can result in the `active` year being part of a different decade than\n   * the specified `fromMilliseconds`, in this case the decade represented by the model\n   * will change to show the correct decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the previous `year` model `up` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `year` one row `up` from the specified moment in time.\n   */\n  goUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(5, 'year').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `year` one (1) year to the `left` of the specified moment in time.\n   *\n   * The `active` year will be the January 1 `one (1) year before` the specified milliseconds.\n   * This moves the `active` date one year `left` in the current `year` view.\n   *\n   * Moving `left` can result in the `active` year being part of a different decade than\n   * the specified `fromMilliseconds`, in this case the decade represented by the model\n   * will change to show the correct decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `year` model to the `left` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `year` one year to the `left` of the specified moment in time.\n   */\n  goLeft(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(1, 'year').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `year` one (1) year to the `right` of the specified moment in time.\n   *\n   * The `active` year will be the January 1 `one (1) year after` the specified milliseconds.\n   * This moves the `active` date one year `right` in the current `year` view.\n   *\n   * Moving `right` can result in the `active` year being part of a different decade than\n   * the specified `fromMilliseconds`, in this case the decade represented by the model\n   * will change to show the correct decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `year` model to the `right` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `year` one year to the `right` of the specified moment in time.\n   */\n  goRight(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(1, 'year').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `year` one decade `down` from the specified moment in time.\n   *\n   * The `active` year will be the January 1 `ten (10) years after` the specified milliseconds.\n   * This moves the `active` date one `page` `down` from the current `year` view.\n   *\n   * Paging `down` will result in the `active` year being part of a different decade than\n   * the specified `fromMilliseconds`. As a result, the decade represented by the model\n   * will change to show the correct decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `year` model page `down` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `year` one decade `down` from the specified moment in time.\n   */\n  pageDown(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).add(10, 'year').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the active `year` one decade `up` from the specified moment in time.\n   *\n   * The `active` year will be the January 1 `ten (10) years before` the specified milliseconds.\n   * This moves the `active` date one `page-up` from the current `year` view.\n   *\n   * Paging `up` will result in the `active` year being part of a different decade than\n   * the specified `fromMilliseconds`. As a result, the decade represented by the model\n   * will change to show the correct decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the next `year` model page `up` will be constructed.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  model containing an `active` `year` one decade `up` from the specified moment in time.\n   */\n  pageUp(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(moment(fromMilliseconds).subtract(10, 'year').valueOf(), selectedMilliseconds);\n  }\n\n  /**\n   * Move the `active` `year` to the `last` year in the decade.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different decade than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `last` active `year` will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the `last` cell in the view as the active `year`.\n   */\n  goEnd(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(\n      DlYearModelProvider.getStartOfDecade(fromMilliseconds)\n        .add(9, 'years')\n        .endOf('year')\n        .valueOf(),\n      selectedMilliseconds\n    );\n  }\n\n  /**\n   * Move the `active` `year` to the `first` year in the decade.\n   *\n   * The view or time range will not change unless the `fromMilliseconds` value\n   * is in a different decade than the displayed decade.\n   *\n   * @param fromMilliseconds\n   *  the moment in time from which the `first` active `year` will be calculated.\n   * @param selectedMilliseconds\n   *  the current value of the date/time picker.\n   * @returns\n   *  a model with the `first` cell in the view as the active `year`.\n   */\n  goHome(fromMilliseconds: number, selectedMilliseconds: number): DlDateTimePickerModel {\n    return this.getModel(\n      DlYearModelProvider.getStartOfDecade(fromMilliseconds)\n        .startOf('year')\n        .valueOf(),\n      selectedMilliseconds\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges\n} from '@angular/core';\n\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport * as _moment from 'moment';\nimport {take} from 'rxjs/operators';\nimport {DlDateAdapter} from '../core/public-api';\nimport {DlDateTimePickerChange} from './dl-date-time-picker-change';\nimport {DateButton} from './dl-date-time-picker-date-button';\nimport {DlDateTimePickerModel} from './dl-date-time-picker-model';\nimport {DlModelProvider} from './dl-model-provider';\nimport {DlDayModelProvider} from './dl-model-provider-day';\nimport {DlHourModelProvider} from './dl-model-provider-hour';\nimport {DlMinuteModelProvider} from './dl-model-provider-minute';\nimport {DlMonthModelProvider} from './dl-model-provider-month';\nimport {DlYearModelProvider} from './dl-model-provider-year';\n\n/**\n * Work around for moment namespace conflict when used with webpack and rollup.\n * See https://github.com/dherges/ng-packagr/issues/163\n *\n * Depending on whether rollup is used, moment needs to be imported differently.\n * Since Moment.js doesn't have a default export, we normally need to import using\n * the `* as`syntax.\n *\n * rollup creates a synthetic default module and we thus need to import it using\n * the `default as` syntax.\n *\n * @internal\n **/\nconst moment = _moment;\n\n\n/**\n * Maps key codes to the model provider function name\n * that should be called to perform the action.\n *\n * @internal\n **/\n\nconst keyCodeToModelProviderMethod = {\n  'ArrowDown': 'goDown',\n  'ArrowLeft': 'goLeft',\n  'ArrowRight': 'goRight',\n  'ArrowUp': 'goUp',\n  'Down': 'goDown',\n  'End': 'goEnd',\n  'Home': 'goHome',\n  'Left': 'goLeft',\n  'PageDown': 'pageDown',\n  'PageUp': 'pageUp',\n  'Right': 'goRight',\n  'Up': 'goUp',\n  33: 'pageUp',\n  34: 'pageDown',\n  35: 'goEnd',\n  36: 'goHome',\n  37: 'goLeft',\n  38: 'goUp',\n  39: 'goRight',\n  40: 'goDown',\n};\n\n\n/**\n * List of view names for the calendar.\n *\n * This list must be in order from\n * smallest increment of time to largest increment of time.\n *\n * @internal\n **/\nconst VIEWS = [\n  'minute',\n  'hour',\n  'day',\n  'month',\n  'year'\n];\n\n/**\n * Component that provides all of the user facing functionality of the date/time picker.\n */\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  preserveWhitespaces: false,\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: DlDateTimePickerComponent,\n      multi: true\n    }\n  ],\n  selector: 'dl-date-time-picker',\n  styleUrls: ['./dl-date-time-picker.component.scss'],\n  templateUrl: './dl-date-time-picker.component.html',\n})\nexport class DlDateTimePickerComponent<D> implements OnChanges, OnInit, ControlValueAccessor {\n\n  /**\n   * Change listener callback functions registered\n   * via `registerOnChange`\n   * @internal\n   **/\n  private _changed: ((value: D) => void)[] = [];\n  /**\n   * Model for the current view.\n   *\n   * @internal\n   **/\n  _model: DlDateTimePickerModel;\n  /**\n   * Maps view name to the next view (the view for the next smallest increment of time).\n   * @internal\n   **/\n  private _nextView = {\n    'year': 'month',\n    'month': 'day',\n    'day': 'hour',\n    'hour': 'minute'\n  };\n  /**\n   * Maps view name to the previous view (the view for the next largest increment of time).\n   * @internal\n   **/\n  private _previousView = {\n    'minute': 'hour',\n    'hour': 'day',\n    'day': 'month',\n    'month': 'year'\n  };\n  /**\n   * Touch listener callback functions registered\n   * via `registerOnChange`\n   * @internal\n   **/\n  private _touched: (() => void)[] = [];\n  /**\n   * Stores the selected value for this picker.\n   * @internal\n   **/\n  private _value: D;\n  /**\n   * Maps view name to the model provider for that view.\n   * @internal\n   **/\n  private readonly _viewToModelProvider: {\n    year: DlModelProvider;\n    month: DlModelProvider;\n    day: DlModelProvider;\n    hour: DlModelProvider;\n    minute: DlModelProvider;\n  };\n  /**\n   * Emits when a `change` event when date/time is selected or\n   * the value of the date/time picker changes.\n   **/\n  @Output()\n  readonly change = new EventEmitter<DlDateTimePickerChange<D>>();\n  /**\n   * Specifies the classes used to display the left icon.\n   *\n   * This component uses OPENICONIC https://useiconic.com/open\n   * by default but any icon library may be used.\n   */\n  @Input()\n  leftIconClass: string | string[] | Set<string> | {} = [\n    'oi',\n    'oi-chevron-left'\n  ];\n  /**\n   * The highest view that the date/time picker can show.\n   * Setting this to a view less than year could make it more\n   * difficult for the end-user to navigate to certain dates.\n   */\n  @Input()\n  maxView: 'year' | 'month' | 'day' | 'hour' | 'minute' = 'year';\n  /**\n   * The view that will be used for date/time selection.\n   *\n   * The default of `minute  means that selection will not happen\n   * until the end-user clicks on a cell in the minute view.\n   *\n   * for example, if you want the end-user to select a only day (date),\n   * setting `minView` to `day` will cause selection to happen when the\n   * end-user selects a cell in the day view.\n   *\n   * NOTE: This must be set lower than or equal to `startView'\n   */\n  @Input()\n  minView: 'year' | 'month' | 'day' | 'hour' | 'minute' = 'minute';\n  /**\n   * The number of minutes between each `.dl-abdtp-minute` button.\n   *\n   * Must be greater than `0` and less than `60`.\n   */\n  @Input()\n  minuteStep = 5;\n  /**\n   * Specifies the classes used to display the right icon.\n   *\n   * This component uses OPENICONIC https://useiconic.com/open\n   * by default but any icon library may be used.\n   */\n  @Input()\n  rightIconClass = [\n    'oi',\n    'oi-chevron-right'\n  ];\n\n  /* tslint:disable:member-ordering */\n  /**\n   *  Determine whether or not the `DateButton` is selectable by the end user.\n   */\n  @Input()\n  selectFilter: (dateButton: DateButton, viewName: string) => boolean = () => true\n\n  /**\n   *  Start at the view containing startDate when no value is selected.\n   */\n  @Input()\n  startDate: number;\n\n  /**\n   * The initial view that the date/time picker will show.\n   * The picker will also return to this view after a date/time\n   * is selected.\n   *\n   * NOTE: This must be set lower than or equal to `maxView'\n   */\n  @Input()\n  startView: 'year' | 'month' | 'day' | 'hour' | 'minute' = 'day';\n\n  /**\n   * Specifies the classes used to display the up icon.\n   *\n   * This component uses OPENICONIC https://useiconic.com/open\n   * by default but any icon library may be used.\n   */\n  @Input()\n  upIconClass = [\n    'oi',\n    'oi-chevron-top'\n  ];\n\n  /**\n   * Used to construct a new instance of a date/time picker.\n   *\n   * @param _elementRef\n   *  reference to this element.\n   * @param _ngZone\n   *  reference to an NgZone instance used to select the active element outside of angular.\n   * @param _dateAdapter\n   *  date adapter for the date type in the model.\n   * @param yearModelComponent\n   *  provider for the year view model.\n   * @param monthModelComponent\n   *  provider for the month view model.\n   * @param dayModelComponent\n   *  provider for the day view model.\n   * @param hourModelComponent\n   *  provider for the hour view model.\n   * @param minuteModelComponent\n   *  provider for the minute view model.\n   */\n  constructor(private _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              private _dateAdapter: DlDateAdapter<D>,\n              // @ts-ignore\n              private yearModelComponent: DlYearModelProvider,\n              // @ts-ignore\n              private monthModelComponent: DlMonthModelProvider,\n              // @ts-ignore\n              private dayModelComponent: DlDayModelProvider,\n              // @ts-ignore\n              private hourModelComponent: DlHourModelProvider,\n              // @ts-ignore\n              private minuteModelComponent: DlMinuteModelProvider) {\n\n    this._viewToModelProvider = {\n      year: yearModelComponent,\n      month: monthModelComponent,\n      day: dayModelComponent,\n      hour: hourModelComponent,\n      minute: minuteModelComponent,\n    };\n  }\n\n  /* tslint:enable:member-ordering */\n  /**\n   * Set's the model for the current view after applying the selection filter.\n   *\n   * @internal\n   **/\n  private set model(model: DlDateTimePickerModel) {\n    this._model = this.applySelectFilter(model);\n  }\n\n  /**\n   * Returns `D` value of the date/time picker or undefined/null if no value is set.\n   **/\n  get value(): D {\n    return this._value;\n  }\n\n  /**\n   * Sets value of the date/time picker and emits a change event if the\n   * new value is different from the previous value.\n   **/\n  set value(value: D) {\n    if (this._value !== value) {\n      this._value = value;\n      this.model = this._viewToModelProvider[this._model.viewName].getModel(this.getStartDate(), this.valueOf);\n      this._changed.forEach(f => f(value));\n      this.change.emit(new DlDateTimePickerChange<D>(value));\n    }\n  }\n\n  /**\n   * Returns `milliseconds` value of the date/time picker or undefined/null if no value is set.\n   **/\n  get valueOf(): number | null {\n    return this._dateAdapter.toMilliseconds(this._value);\n  }\n\n  /**\n   * Applies the `selectionFilter` by adding the `dl-abdtp-disabled`\n   * class to any `DateButton` where `selectFilter` returned false.\n   *\n   * @param model\n   *  the new model\n   *\n   * @returns\n   *  the supplied model with zero or more `DateButton`'s\n   *  having the `dl-abdtp-disabled` class set to `true` if the\n   *  selection for that date should be disabled.\n   *\n   * @internal\n   */\n  private applySelectFilter(model: DlDateTimePickerModel): DlDateTimePickerModel {\n    if (this.selectFilter) {\n      model.rows = model.rows.map((row) => {\n        row.cells.map((dateButton: DateButton) => {\n          const disabled = !this.selectFilter(dateButton, model.viewName);\n          dateButton.classes['dl-abdtp-disabled'] = disabled;\n          if (disabled) {\n            dateButton.classes['aria-disabled'] = true;\n          }\n          return dateButton;\n        });\n        return row;\n      });\n    }\n\n    return model;\n  }\n\n  /**\n   * Focuses the `.dl-abdtp-active` cell after the microtask queue is empty.\n   * @internal\n   **/\n  private focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._elementRef.nativeElement.querySelector('.dl-abdtp-active').focus();\n      });\n    });\n  }\n\n  /**\n   * Determines the start date for the picker.\n   * @internal\n   **/\n  private getStartDate() {\n    if (hasValue(this._value)) {\n      return this._dateAdapter.toMilliseconds(this._value);\n    }\n    if (hasValue(this.startDate)) {\n      return this.startDate;\n    }\n    return moment().valueOf();\n  }\n\n  /**\n   * Determine the start view for the picker\n   * @returns\n   *  the largest time increment view between the `minView` or `minute` view and the `startView` or `day` view.\n   */\n  private getStartView(): string {\n    const startIndex = Math.max(VIEWS.indexOf(this.minView || 'minute'), VIEWS.indexOf(this.startView || 'day'));\n    return VIEWS[startIndex];\n  }\n\n  /**\n   * Calls all registered `touch` callback functions.\n   * @internal\n   **/\n  private onTouch() {\n    this._touched.forEach((onTouched) => onTouched());\n  }\n\n  /**\n   * Receives configuration changes detected by Angular and passes the changes on\n   * to the model providers so the provider is aware of any necessary configuration\n   * changes (i.e. minuteStep)\n   *\n   * @param changes\n   *  the input changes detected by Angular.\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    Object.values(this._viewToModelProvider).forEach((provider: DlModelProvider) => provider.onChanges(changes));\n\n    if (this._model) { // only update the model after ngOnInit has set it the first time.\n      this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.activeDate, this.valueOf);\n    }\n  }\n\n  /**\n   * Sets the initial model.\n   *\n   * @internal\n   **/\n  ngOnInit(): void {\n    this.model = this._viewToModelProvider[this.getStartView()].getModel(this.getStartDate(), this.valueOf);\n  }\n\n  /**\n   * Handles click (and enter & space key down) events on the date elements.\n   *\n   * If the current view is the minimum view then the date value is selected\n   * and the picker returns to the start view.\n   *\n   * Otherwise the picker displays the next view with the next\n   * smallest time increment.\n   *\n   * @internal\n   **/\n  _onDateClick(dateButton: DateButton) {\n    if (dateButton.classes['dl-abdtp-disabled']) {\n      return;\n    }\n\n    let nextView = this._nextView[this._model.viewName];\n\n    if ((this.minView || 'minute') === this._model.viewName) {\n      this.value = this._dateAdapter.fromMilliseconds(dateButton.value);\n      nextView = this.startView;\n    }\n\n    this.model = this._viewToModelProvider[nextView].getModel(dateButton.value, this.valueOf);\n\n    this.onTouch();\n  }\n\n  /**\n   * Handles click (and enter & space key down) events on the left button.\n   *\n   * Changes the displayed time range of the picker to the previous time range.\n   * For example, in year view, the previous decade is displayed.\n   *\n   * @internal\n   **/\n  _onLeftClick() {\n    this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.leftButton.value, this.valueOf);\n    this.onTouch();\n  }\n\n  /**\n   * Handles click (and enter & space key down) events on the up button.\n   *\n   * Changes the view of the picker to the next largest time increment.\n   * For example, in day view, the next view displayed will be month view.\n   *\n   * @internal\n   **/\n  _onUpClick() {\n    this.model = this._viewToModelProvider[this._previousView[this._model.viewName]].getModel(this._model.upButton.value, this.valueOf);\n  }\n\n  /**\n   * Handles click (and enter & space key down) events on the right button.\n   *\n   * Changes the displayed time range of the picker to the next time range.\n   * For example, in year view, the next decade is displayed.\n   *\n   * @internal\n   **/\n  _onRightClick() {\n    this.model = this._viewToModelProvider[this._model.viewName].getModel(this._model.rightButton.value, this.valueOf);\n    this.onTouch();\n  }\n\n  /**\n   * Handles various key down events to move the `active date` around the calendar.\n   *\n   * @internal\n   **/\n  _handleKeyDown($event: KeyboardEvent): void {\n    const functionName = keyCodeToModelProviderMethod[$event.key];\n\n    if (functionName) {\n      const modelProvider = this._viewToModelProvider[this._model.viewName];\n      this.model = modelProvider[functionName](this._model.activeDate, this.valueOf);\n\n      this.focusActiveCell();\n      // Prevent unexpected default actions such as form submission.\n      $event.preventDefault();\n    }\n  }\n\n  /**\n   * Implements ControlValueAccessor.registerOnChange to register change listeners.\n   * @internal\n   **/\n  registerOnChange(fn: (value: D) => void) {\n    this._changed.push(fn);\n  }\n\n  /**\n   * Implements ControlValueAccessor.registerOnTouched to register touch listeners.\n   * @internal\n   **/\n  registerOnTouched(fn: () => void) {\n    this._touched.push(fn);\n  }\n\n  /**\n   * Implements ControlValueAccessor.writeValue to store the value from the model.\n   * @internal\n   **/\n  writeValue(value: D) {\n    this.value = value;\n  }\n\n}\n\n/** @internal */\nfunction hasValue(value: any): boolean {\n  return (typeof value !== 'undefined') && (value !== null);\n}\n","/**\n * @license\n * Copyright 2013-present Dale Lotts All Rights Reserved.\n * http://www.dalelotts.com\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/dalelotts/angular-bootstrap-datetimepicker/blob/master/LICENSE\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {DlDateTimePickerComponent} from './dl-date-time-picker.component';\nimport {DlDayModelProvider} from './dl-model-provider-day';\nimport {DlHourModelProvider} from './dl-model-provider-hour';\nimport {DlMinuteModelProvider} from './dl-model-provider-minute';\nimport {DlMonthModelProvider} from './dl-model-provider-month';\nimport {DlYearModelProvider} from './dl-model-provider-year';\n\n/**\n * Import this module to supply your own `DateAdapter` provider.\n * @internal\n **/\n@NgModule({\n  declarations: [DlDateTimePickerComponent],\n  imports: [CommonModule],\n  exports: [DlDateTimePickerComponent],\n  providers: [\n    DlYearModelProvider,\n    DlMonthModelProvider,\n    DlDayModelProvider,\n    DlHourModelProvider,\n    DlMinuteModelProvider\n  ],\n})\nexport class DlDateTimePickerModule {\n}\n"],"names":["tslib_1.__extends","moment","_moment['default']","InjectionToken","tslib_1.__param","Inject","NgModule","Validators","EventEmitter","Renderer2","ElementRef","tslib_1.__decorate","Output","Input","HostListener","Directive","NG_VALUE_ACCESSOR","NG_VALIDATORS","CommonModule","take","NgZone","Component","ChangeDetectionStrategy"],"mappings":";;;;;;;;IAAA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;;IAEA,IAAI,aAAa,GAAG,SAAS,CAAC,EAAE,CAAC,EAAE;IACnC,IAAI,aAAa,GAAG,MAAM,CAAC,cAAc;IACzC,SAAS,EAAE,SAAS,EAAE,EAAE,EAAE,YAAY,KAAK,IAAI,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,EAAE,CAAC;IACpF,QAAQ,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IACnF,IAAI,OAAO,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC,CAAC;;AAEF,IAAO,SAAS,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE;IAChC,IAAI,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB,IAAI,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,WAAW,GAAG,CAAC,CAAC,EAAE;IAC3C,IAAI,CAAC,CAAC,SAAS,GAAG,CAAC,KAAK,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACzF,CAAC;;AAED,IAAO,IAAI,QAAQ,GAAG,WAAW;IACjC,IAAI,QAAQ,GAAG,MAAM,CAAC,MAAM,IAAI,SAAS,QAAQ,CAAC,CAAC,EAAE;IACrD,QAAQ,KAAK,IAAI,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IAC7D,YAAY,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IAC7B,YAAY,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACzF,SAAS;IACT,QAAQ,OAAO,CAAC,CAAC;IACjB,MAAK;IACL,IAAI,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC3C,EAAC;;AAED,IAAO,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;IAC7B,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;IACf,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;IACvF,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACpB,IAAI,IAAI,CAAC,IAAI,IAAI,IAAI,OAAO,MAAM,CAAC,qBAAqB,KAAK,UAAU;IACvE,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAChF,YAAY,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,SAAS,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1F,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAClC,SAAS;IACT,IAAI,OAAO,CAAC,CAAC;IACb,CAAC;;AAED,IAAO,SAAS,UAAU,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,EAAE;IAC1D,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,GAAG,MAAM,CAAC,wBAAwB,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC;IACjI,IAAI,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,UAAU,EAAE,CAAC,GAAG,OAAO,CAAC,QAAQ,CAAC,UAAU,EAAE,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACnI,SAAS,KAAK,IAAI,CAAC,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;IACtJ,IAAI,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;IAClE,CAAC;;AAED,IAAO,SAAS,OAAO,CAAC,UAAU,EAAE,SAAS,EAAE;IAC/C,IAAI,OAAO,UAAU,MAAM,EAAE,GAAG,EAAE,EAAE,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,CAAC,CAAC,EAAE;IACzE,CAAC;;AAED,IAAO,SAAS,UAAU,CAAC,WAAW,EAAE,aAAa,EAAE;IACvD,IAAI,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,OAAO,CAAC,QAAQ,KAAK,UAAU,EAAE,OAAO,OAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IACnI,CAAC;;AAED,IAAO,SAAS,SAAS,CAAC,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,SAAS,EAAE;IAC7D,IAAI,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,EAAE,UAAU,OAAO,EAAE,MAAM,EAAE;IAC/D,QAAQ,SAAS,SAAS,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;IACnG,QAAQ,SAAS,QAAQ,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;IACtG,QAAQ,SAAS,IAAI,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,CAAC,UAAU,OAAO,EAAE,EAAE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,EAAE;IACvJ,QAAQ,IAAI,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;IAC9E,KAAK,CAAC,CAAC;IACP,CAAC;;AAED,IAAO,SAAS,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE;IAC3C,IAAI,IAAI,CAAC,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACrH,IAAI,OAAO,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,OAAO,MAAM,KAAK,UAAU,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,WAAW,EAAE,OAAO,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC7J,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE,EAAE,OAAO,UAAU,CAAC,EAAE,EAAE,OAAO,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE;IACtE,IAAI,SAAS,IAAI,CAAC,EAAE,EAAE;IACtB,QAAQ,IAAI,CAAC,EAAE,MAAM,IAAI,SAAS,CAAC,iCAAiC,CAAC,CAAC;IACtE,QAAQ,OAAO,CAAC,EAAE,IAAI;IACtB,YAAY,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;IACzK,YAAY,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;IACpD,YAAY,QAAQ,EAAE,CAAC,CAAC,CAAC;IACzB,gBAAgB,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM;IAC9C,gBAAgB,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;IACxE,gBAAgB,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;IACjE,gBAAgB,KAAK,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,SAAS;IACjE,gBAAgB;IAChB,oBAAoB,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE;IAChI,oBAAoB,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE;IAC1G,oBAAoB,IAAI,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,MAAM,EAAE;IACzF,oBAAoB,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE;IACvF,oBAAoB,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;IAC1C,oBAAoB,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,SAAS;IAC3C,aAAa;IACb,YAAY,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;IACvC,SAAS,CAAC,OAAO,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE;IAClE,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;IACzF,KAAK;IACL,CAAC;;AAED,IAAO,SAAS,YAAY,CAAC,CAAC,EAAE,OAAO,EAAE;IACzC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACvE,CAAC;;AAED,IAAO,SAAS,QAAQ,CAAC,CAAC,EAAE;IAC5B,IAAI,IAAI,CAAC,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;IACtE,IAAI,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAI,OAAO;IACX,QAAQ,IAAI,EAAE,YAAY;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;IAC/C,YAAY,OAAO,EAAE,KAAK,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;IACpD,SAAS;IACT,KAAK,CAAC;IACN,CAAC;;AAED,IAAO,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;IAC7B,IAAI,IAAI,CAAC,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC/D,IAAI,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;IACrB,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;IACrC,IAAI,IAAI;IACR,QAAQ,OAAO,CAAC,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;IACnF,KAAK;IACL,IAAI,OAAO,KAAK,EAAE,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE;IAC3C,YAAY;IACZ,QAAQ,IAAI;IACZ,YAAY,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC7D,SAAS;IACT,gBAAgB,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,EAAE;IACzC,KAAK;IACL,IAAI,OAAO,EAAE,CAAC;IACd,CAAC;;AAED,IAAO,SAAS,QAAQ,GAAG;IAC3B,IAAI,KAAK,IAAI,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE;IACtD,QAAQ,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7C,IAAI,OAAO,EAAE,CAAC;IACd,CAAC;;AAED,IAAO,SAAS,cAAc,GAAG;IACjC,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IACxF,IAAI,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE;IACpD,QAAQ,KAAK,IAAI,CAAC,GAAG,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE;IACzE,YAAY,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,OAAO,CAAC,CAAC;IACb,CAAC,CAAC;;AAEF,IAAO,SAAS,OAAO,CAAC,CAAC,EAAE;IAC3B,IAAI,OAAO,IAAI,YAAY,OAAO,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,EAAE,IAAI,IAAI,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC;IACzE,CAAC;;AAED,IAAO,SAAS,gBAAgB,CAAC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE;IACjE,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,IAAI,SAAS,CAAC,sCAAsC,CAAC,CAAC;IAC3F,IAAI,IAAI,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,OAAO,EAAE,UAAU,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC;IAClE,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,YAAY,EAAE,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAC1H,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;IAC9I,IAAI,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE;IACtF,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,YAAY,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAC5H,IAAI,SAAS,OAAO,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,EAAE;IACtD,IAAI,SAAS,MAAM,CAAC,KAAK,EAAE,EAAE,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,EAAE;IACtD,IAAI,SAAS,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACtF,CAAC;;AAED,IAAO,SAAS,gBAAgB,CAAC,CAAC,EAAE;IACpC,IAAI,IAAI,CAAC,EAAE,CAAC,CAAC;IACb,IAAI,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,OAAO,EAAE,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,YAAY,EAAE,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;IAChJ,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,KAAK,QAAQ,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,EAAE;IACnJ,CAAC;;AAED,IAAO,SAAS,aAAa,CAAC,CAAC,EAAE;IACjC,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,IAAI,SAAS,CAAC,sCAAsC,CAAC,CAAC;IAC3F,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;IACvC,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,OAAO,QAAQ,KAAK,UAAU,GAAG,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC,GAAG,YAAY,EAAE,OAAO,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IACrN,IAAI,SAAS,IAAI,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,UAAU,CAAC,EAAE,EAAE,OAAO,IAAI,OAAO,CAAC,UAAU,OAAO,EAAE,MAAM,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE;IACpK,IAAI,SAAS,MAAM,CAAC,OAAO,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,EAAE;IAChI,CAAC;;AAED,IAAO,SAAS,oBAAoB,CAAC,MAAM,EAAE,GAAG,EAAE;IAClD,IAAI,IAAI,MAAM,CAAC,cAAc,EAAE,EAAE,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE;IACnH,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC,CAAC;;AAEF,IAAO,SAAS,YAAY,CAAC,GAAG,EAAE;IAClC,IAAI,IAAI,GAAG,IAAI,GAAG,CAAC,UAAU,EAAE,OAAO,GAAG,CAAC;IAC1C,IAAI,IAAI,MAAM,GAAG,EAAE,CAAC;IACpB,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,KAAK,IAAI,CAAC,IAAI,GAAG,EAAE,IAAI,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IACnG,IAAI,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;IACzB,IAAI,OAAO,MAAM,CAAC;IAClB,CAAC;;AAED,IAAO,SAAS,eAAe,CAAC,GAAG,EAAE;IACrC,IAAI,OAAO,CAAC,GAAG,IAAI,GAAG,CAAC,UAAU,IAAI,GAAG,GAAG,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;IAC5D,CAAC;;ICnMD;;;AAGA;QAAA;SAmBC;QAAD,oBAAC;KAAA;;IClBD;;;;;;;;;;;;;IAaA,IAAM,MAAM,GAAG,OAAO,CAAC;;;;AAKvB;QAAyCA,uCAAqB;QAA9D;;SAuBC;;;;;;;;QAdC,8CAAgB,GAAhB,UAAiB,YAAoB;YACnC,OAAO,MAAM,CAAC,YAAY,CAAC,CAAC;SAC7B;;;;;;;;QASD,4CAAc,GAAd,UAAe,KAAoB;YACjC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC;SAC9C;QACH,0BAAC;KAvBD,CAAyC,aAAa;;ICpBtD;;;AAGA;QAAyCA,uCAAmB;QAA5D;;SAuBC;;;;;;;;QAfC,8CAAgB,GAAhB,UAAiB,YAAoB;YACnC,OAAO,IAAI,IAAI,CAAC,YAAY,CAAC,CAAC;SAC/B;;;;;;;;QAUD,4CAAc,GAAd,UAAe,KAAkB;YAC/B,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC;SAC9C;QACH,0BAAC;KAvBD,CAAyC,aAAa;;ICHtD;;;;AAIA;QAAyCA,uCAAqB;QAA9D;;SAsBC;;;;;;;;QAdC,8CAAgB,GAAhB,UAAiB,YAAoB;YACnC,OAAO,YAAY,CAAC;SACrB;;;;;;;;QASD,4CAAc,GAAd,UAAe,KAAoB;YACjC,OAAO,KAAK,CAAC;SACd;QACH,0BAAC;KAtBD,CAAyC,aAAa;;ICFtD;;;IAGA,IAAIC,QAAM,GAAG,OAAO,CAAC;;IAErB,IAAI,SAAS,IAAI,OAAO,EAAE;QACxBA,QAAM,GAAGC,gBAAkB,CAAC;KAC7B;;;;AAKD,QAAa,2BAA2B,GAAG,IAAIC,mBAAc,CAAS,6BAA6B,CAAC,CAAC;;;;;AAMrG,QAAa,mCAAmC,GAAGF,QAAM,CAAC,UAAU,EAAE,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;;;;AAK7F,QAAa,0BAA0B,GAAG,IAAIE,mBAAc,CAAW,6BAA6B,CAAC,CAAC;;;;AAKtG,QAAa,kCAAkC,GAAG;QAChD,kBAAkB;QAClB,qBAAqB;QACrB,yBAAyB;QACzB,YAAY;QACZ,kBAAkB;QAClB,gBAAgB;QAChB,gBAAgB;QAChB,UAAU;QACV,gBAAgB;QAChB,cAAc;QACd,YAAY;QACZ,QAAQ;QACR,mCAAmC;QACnCF,QAAM,CAAC,QAAQ;KAChB,CAAC;;;;AAKF,QAAa,yBAAyB,GAAG,IAAIE,mBAAc,CAAS,2BAA2B,CAAC,CAAC;;;;AAKjG,QAAa,iCAAiC,GAAG,0BAA0B;;ICpD3E;;;;;;;;;;;;;;IAcA,IAAMF,QAAM,GAAG,OAAO,CAAC;;;;AAKvB;QAAyCD,uCAAqB;;;;;;;;;QAa5D,6BAAgD,YAAsB,EACvB,WAAmB;YADlE,YAEE,iBAAO,SAGR;YAFC,KAAI,CAAC,YAAY,GAAG,YAAY,CAAC;YACjC,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;;SAChC;;;;;;;;QASD,8CAAgB,GAAhB,UAAiB,YAAoB;YACnC,OAAOC,QAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SACtD;;;;;;;;;QAUD,4CAAc,GAAd,UAAe,KAAoB;YACjC,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;gBACzC,IAAM,SAAS,GAAGA,QAAM,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;gBACzD,OAAO,SAAS,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC,OAAO,EAAE,GAAG,SAAS,CAAC;aAC9D;SACF;QA5CU,mBAAmB;YAajBG,WAAAC,WAAM,CAAC,0BAA0B,CAAC,CAAA;YAClCD,WAAAC,WAAM,CAAC,yBAAyB,CAAC,CAAA;WAdnC,mBAAmB,CA6C/B;QAAD,0BAAC;KAAA,CA7CwC,aAAa;;aCHD,mCAAmC,OACpC,kCAAkC,OACnC,iCAAiC;;;;;AAGpF;QAAA;SACC;QADY,oBAAoB;YAPhCC,aAAQ,CAAC;gBACR,SAAS,EAAE;oBACT,EAAC,OAAO,EAAE,2BAA2B,EAAE,QAAQ,IAAqC,EAAC;oBACrF,EAAC,OAAO,EAAE,0BAA0B,EAAE,QAAQ,IAAoC,EAAC;oBACnF,EAAC,OAAO,EAAE,yBAAyB,EAAE,QAAQ,IAAmC,EAAC;iBAClF;aACF,CAAC;WACW,oBAAoB,CAChC;QAAD,2BAAC;KADD,IACC;IAED;;;;AAWA;QAAA;SACC;QADY,sBAAsB;YAPlCA,aAAQ,CAAC;gBACR,OAAO,EAAE,CAAC,oBAAoB,CAAC;gBAC/B,SAAS,EAAE;oBACT,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,mBAAmB,EAAC;iBACxD;gBACD,OAAO,EAAE,CAAC,oBAAoB,CAAC;aAChC,CAAC;WACW,sBAAsB,CAClC;QAAD,6BAAC;KADD,IACC;IAED;;;;AAUA;QAAA;SACC;QADY,oBAAoB;YANhCA,aAAQ,CAAC;gBACR,OAAO,EAAE,CAAC,oBAAoB,CAAC;gBAC/B,SAAS,EAAE;oBACT,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,mBAAmB,EAAC;iBACxD;aACF,CAAC;WACW,oBAAoB,CAChC;QAAD,2BAAC;KADD,IACC;IAED;;;;AAUA;QAAA;SACC;QADY,sBAAsB;YANlCA,aAAQ,CAAC;gBACR,OAAO,EAAE,CAAC,oBAAoB,CAAC;gBAC/B,SAAS,EAAE;oBACT,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,mBAAmB,EAAC;iBACxD;aACF,CAAC;WACW,sBAAsB,CAClC;QAAD,6BAAC;KADD,IACC;aASmD,kCAAkC,OACnC,mCAAmC;;;;;AAItF;QAAA;SACC;QADY,sBAAsB;YARlCA,aAAQ,CAAC;gBACR,OAAO,EAAE,CAAC,oBAAoB,CAAC;gBAC/B,SAAS,EAAE;oBACT,EAAC,OAAO,EAAE,0BAA0B,EAAE,QAAQ,IAAoC,EAAC;oBACnF,EAAC,OAAO,EAAE,yBAAyB,EAAE,QAAQ,IAAqC,EAAC;oBACnF,EAAC,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,mBAAmB,EAAC;iBACxD;aACF,CAAC;WACW,sBAAsB,CAClC;QAAD,6BAAC;KADD;;ICjFA;;;;;;;;;ICAA;;;;;;;;;;;AAYA;;;;;;QAYE,+BAAY,QAAW;YACrB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;SACxB;QAMD,sBAAI,wCAAK;;;;;iBAAT;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC;aACpB;;;WAAA;QACH,4BAAC;KAAA;;ICpBD;;;IAGA,IAAML,QAAM,GAAG,OAAO,CAAC;;;;;;;AAevB;;;;;;;;;;;;;;;QAyCE,kCACU,SAAoB,EACpB,WAAuB,EACvB,YAA8B,EACgB,cAAsB,EACvB,aAAuB;YAL9E,iBAMI;YALM,cAAS,GAAT,SAAS,CAAW;YACpB,gBAAW,GAAX,WAAW,CAAY;YACvB,iBAAY,GAAZ,YAAY,CAAkB;YACgB,mBAAc,GAAd,cAAc,CAAQ;YACvB,kBAAa,GAAb,aAAa,CAAU;;YA3CtE,qBAAgB,GAAgB,UAAC,OAAwB;;gBAE/D,OAAO,CAAC,KAAI,CAAC,YAAY,KAAK,cAAM,OAAA,IAAI,GAAA,CAAC,EAAE,KAAI,CAAC,MAAM,CAAC;oBACrD,IAAI,GAAG,EAAC,uBAAuB,EAAE,EAAC,OAAO,EAAE,OAAO,CAAC,KAAK,EAAC,EAAC,CAAC;aAC9D,CAAA;YACO,iBAAY,GAAmC,cAAM,OAAA,IAAI,GAAA,CAAC;YAC1D,aAAQ,GAAG,IAAI,CAAC;YAChB,oBAAe,GAAgB;gBACrC,OAAO,KAAI,CAAC,QAAQ;oBAClB,IAAI,GAAG,EAAC,sBAAsB,EAAE,EAAC,MAAM,EAAE,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,KAAK,EAAC,EAAC,CAAC;aACnF,CAAA;YACO,aAAQ,GAA2B,EAAE,CAAC;YACtC,aAAQ,GAAmB,EAAE,CAAC;YAC9B,eAAU,GAAGM,gBAAU,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC/E,uBAAkB,GAAe,eAAQ,CAAC;YAC1C,WAAM,GAAkB,SAAS,CAAC;;;;;YAOjC,eAAU,GAAG,IAAIC,iBAAY,EAA4B,CAAC;SAsB/D;qCA/CO,wBAAwB;QAuDnC,sBAAI,2DAAqB;;;;;;iBAAzB,UAA0B,mBAAiD;gBACzE,IAAI,CAAC,YAAY,GAAG,mBAAmB,KAAK,cAAM,OAAA,IAAI,GAAA,CAAC,CAAC;gBACxD,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC3B;;;WAAA;QAOD,sBAAI,2CAAK;;;;;iBAAT;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC;aACpB;;;;;;iBAQD,UAAU,QAA8B;gBAAxC,iBAKC;gBAJC,IAAI,QAAQ,KAAK,IAAI,CAAC,MAAM,EAAE;oBAC5B,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;oBACvB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,CAAC,KAAI,CAAC,MAAM,CAAC,GAAA,CAAC,CAAC;iBAC5D;aACF;;;WAbA;;;;QAkBuB,4CAAS,GAAT;YACtB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;SAC9D;;;;QAKqB,0CAAO,GAAP;YACpB,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACpC;YACD,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,SAAS,IAAI,OAAA,SAAS,EAAE,GAAA,CAAC,CAAC;SACjD;;;;;;;QAQ+C,2CAAQ,GAAR,UAAS,KAAgC;YACvF,IAAM,QAAQ,GAAG,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,EAAE;kBAClE,SAAS;kBACTP,QAAM,CAAC,KAAK,EAAE,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;YAE5C,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,QAAQ,CAAC,OAAO,EAAE,CAAC;YAC/C,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC,GAAG,SAAS,CAAC;SACjG;;;;QAKO,mDAAgB,GAAxB,UAAyB,KAAQ;YAC/B,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,EAAE;gBACzC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,OAAO,EAAEA,QAAM,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;aAChH;SACF;;;;QAKD,mDAAgB,GAAhB,UAAiB,QAA8B;YAC7C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC9B;;;;QAKD,oDAAiB,GAAjB,UAAkB,SAAqB;YACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;SAC/B;;;;QAKD,4DAAyB,GAAzB,UAA0B,iBAA6B;YACrD,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;SAC7C;;;;QAKD,mDAAgB,GAAhB,UAAiB,UAAmB;YAClC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;SACpF;;;;QAKD,2CAAQ,GAAR,UAAS,OAAwB;YAC/B,OAAO,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;SACjC;;;;QAKD,6CAAU,GAAV,UAAW,KAAQ;YACjB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;YACrB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;SAC9B;;;oBA3HoBQ,cAAS;oBACPC,eAAU;oBACT,aAAa;iDAClCL,WAAM,SAAC,2BAA2B;gDAClCA,WAAM,SAAC,0BAA0B;;QArBpCM;YADCC,WAAM,EAAE;oEAC0D;QA8BnED;YADCE,UAAK,EAAE;6EAIP;QA2BuBF;YAAvBG,iBAAY,CAAC,QAAQ,CAAC;iEAEtB;QAKqBH;YAArBG,iBAAY,CAAC,MAAM,CAAC;+DAKpB;QAQ+CH;YAA/CG,iBAAY,CAAC,OAAO,EAAE,CAAC,qBAAqB,CAAC,CAAC;gEAO9C;QAhHU,wBAAwB;YAPpCC,cAAS,CAAC;gBACT,QAAQ,EAAE,wBAAwB;gBAClC,SAAS,EAAE;oBACT,EAAC,OAAO,EAAEC,uBAAiB,EAAE,WAAW,EAAG,0BAAwB,EAAE,KAAK,EAAE,IAAI,EAAC;oBACjF,EAAC,OAAO,EAAEC,mBAAa,EAAE,WAAW,EAAG,0BAAwB,EAAE,KAAK,EAAE,IAAI,EAAC;iBAC9E;aACF,CAAC;YA8CGb,WAAAC,WAAM,CAAC,2BAA2B,CAAC,CAAA;YACnCD,WAAAC,WAAM,CAAC,0BAA0B,CAAC,CAAA;WA9C1B,wBAAwB,CAsKpC;QAAD,+BAAC;KAtKD;;ICjCA;;;;;;;;IAaA;;;;AASA;QAAA;SACC;QADY,qBAAqB;YALjCC,aAAQ,CAAC;gBACR,YAAY,EAAE,CAAC,wBAAwB,CAAC;gBACxC,OAAO,EAAE,CAACY,mBAAY,CAAC;gBACvB,OAAO,EAAE,CAAC,wBAAwB,CAAC;aACpC,CAAC;WACW,qBAAqB,CACjC;QAAD,4BAAC;KADD;;ICtBA;;;;;;;;;ICAA;;;;;;;;;;;AAYA;;;;;;QAYE,gCAAY,QAAW;YACrB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;SACxB;QAMD,sBAAI,yCAAK;;;;;iBAAT;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC;aACpB;;;WAAA;QACH,6BAAC;KAAA;;ICnCD;;;;;;;;IAUA;;;;;;;;;;;;;IAiBA,IAAMjB,QAAM,GAAG,OAAO,CAAC;;;;AAKvB;QAAA;SA0OC;;;;;;;QAlOC,sCAAS,GAAT;;QAEE,OAAsB,KACd;;;;;;;;;;;;;;;;;;;QAoBV,qCAAQ,GAAR,UAAS,YAAoB,EAAE,oBAA4B;YAEzD,IAAM,YAAY,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAC3D,IAAM,UAAU,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACvD,IAAM,WAAW,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;YAE5F,IAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACtC,IAAM,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAE5C,IAAM,aAAa,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YAChE,IAAM,SAAS,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YACvD,IAAM,WAAW,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;YAClE,IAAM,aAAa,GAAG,oBAAoB,KAAK,IAAI,IAAI,oBAAoB,KAAK,SAAS;kBACrF,oBAAoB;kBACpBA,QAAM,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;YAE1D,OAAO;gBACL,QAAQ,EAAE,KAAK;gBACf,SAAS,EAAE,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC;gBAC1C,UAAU,EAAE,WAAW;gBACvB,UAAU,EAAE;oBACV,KAAK,EAAE,aAAa,CAAC,OAAO,EAAE;oBAC9B,SAAS,EAAE,WAAS,aAAa,CAAC,MAAM,CAAC,UAAU,CAAG;oBACtD,OAAO,EAAE,EAAE;iBACZ;gBACD,QAAQ,EAAE;oBACR,KAAK,EAAE,YAAY,CAAC,OAAO,EAAE;oBAC7B,SAAS,EAAE,kBAAkB;oBAC7B,OAAO,EAAE,EAAE;iBACZ;gBACD,WAAW,EAAE;oBACX,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE;oBAC1B,SAAS,EAAE,WAAS,SAAS,CAAC,MAAM,CAAC,UAAU,CAAG;oBAClD,OAAO,EAAE,EAAE;iBACZ;gBACD,SAAS,EAAE,aAAa,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAAA,QAAM,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAA,CAAC;gBAC/E,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC;aAChC,CAAC;YAEF,SAAS,SAAS,CAAC,SAAS;gBAC1B,IAAM,aAAa,GAAGA,QAAM,EAAE,CAAC;gBAC/B,IAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,UAAC,YAAY;oBAC3C,IAAM,SAAS,GAAGA,QAAM,CAAC,WAAW,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,GAAG,aAAa,CAAC,MAAM,IAAI,YAAY,EAAE,MAAM,CAAC,CAAC;oBACrG,OAAO;wBACL,OAAO,EAAE,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC;wBAC9B,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC;wBACjC,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE;wBAC1B,OAAO,EAAE;4BACP,iBAAiB,EAAE,WAAW,KAAK,SAAS,CAAC,OAAO,EAAE;4BACtD,iBAAiB,EAAE,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC;4BAChD,eAAe,EAAE,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC;4BACjD,mBAAmB,EAAE,aAAa,KAAK,SAAS,CAAC,OAAO,EAAE;4BAC1D,cAAc,EAAE,SAAS,CAAC,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;yBACvD;qBACF,CAAC;iBACH,CAAC,CAAC;gBACH,OAAO,EAAC,KAAK,OAAA,EAAC,CAAC;aAChB;SACF;;;;;;;;;;;;;;;QAgBD,mCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC/F;;;;;;;;;;;;;;;QAgBD,iCAAI,GAAJ,UAAK,gBAAwB,EAAE,oBAA4B;YACzD,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACpG;;;;;;;;;;;;;;;QAgBD,mCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACnG;;;;;;;;;;;;;;;QAgBD,oCAAO,GAAP,UAAQ,gBAAwB,EAAE,oBAA4B;YAC5D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC9F;;;;;;;;;;;;;;;QAgBD,qCAAQ,GAAR,UAAS,gBAAwB,EAAE,oBAA4B;YAC7D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAChG;;;;;;;;;;;;;;;QAgBD,mCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACrG;;;;;;;;;;;;;;QAgBD,kCAAK,GAAL,UAAM,gBAAwB,EAAE,oBAA4B;YAC1D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC;iBAC1C,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACnE;;;;;;;;;;;;;;QAeD,mCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACjG;QACH,yBAAC;KAAA;;IC1QD;;;;;;;;IAUA;;;;;;;;;;;;;IAiBA,IAAMA,QAAM,GAAG,OAAO,CAAC;;;;AAKvB;QAAA;SAwOC;;;;;;;QAhOC,uCAAS,GAAT;;QAEE,OAAsB,KACd;;;;;;;;;;;;;;;;;;;QAqBV,sCAAQ,GAAR,UAAS,YAAoB,EAAE,oBAA4B;YACzD,IAAM,SAAS,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAEtD,IAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACtC,IAAM,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEnC,IAAM,WAAW,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACzD,IAAM,OAAO,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAChD,IAAM,WAAW,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YACnE,IAAM,aAAa,GAAG,oBAAoB,KAAK,IAAI,IAAI,oBAAoB,KAAK,SAAS;kBACrF,oBAAoB;kBACpBA,QAAM,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAE3D,OAAO;gBACL,QAAQ,EAAE,MAAM;gBAChB,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC;gBACjC,UAAU,EAAE,WAAW;gBACvB,UAAU,EAAE;oBACV,KAAK,EAAE,WAAW,CAAC,OAAO,EAAE;oBAC5B,SAAS,EAAE,WAAS,WAAW,CAAC,MAAM,CAAC,IAAI,CAAG;oBAC9C,OAAO,EAAE,EAAE;iBACZ;gBACD,QAAQ,EAAE;oBACR,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE;oBAC1B,SAAS,EAAE,WAAS,SAAS,CAAC,MAAM,CAAC,UAAU,CAAG;oBAClD,OAAO,EAAE,EAAE;iBACZ;gBACD,WAAW,EAAE;oBACX,KAAK,EAAE,OAAO,CAAC,OAAO,EAAE;oBACxB,SAAS,EAAE,WAAS,OAAO,CAAC,MAAM,CAAC,IAAI,CAAG;oBAC1C,OAAO,EAAE,EAAE;iBACZ;gBACD,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC;aACjC,CAAC;YAEF,SAAS,UAAU,CAAC,SAAS;gBAE3B,IAAM,aAAa,GAAGA,QAAM,EAAE,CAAC;gBAC/B,IAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,UAAC,YAAY;oBAC3C,IAAM,UAAU,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,GAAG,aAAa,CAAC,MAAM,IAAI,YAAY,EAAE,OAAO,CAAC,CAAC;oBACrG,OAAO;wBACL,OAAO,EAAE,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC;wBAChC,SAAS,EAAE,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC;wBACnC,KAAK,EAAE,UAAU,CAAC,OAAO,EAAE;wBAC3B,OAAO,EAAE;4BACP,iBAAiB,EAAE,WAAW,KAAK,UAAU,CAAC,OAAO,EAAE;4BACvD,mBAAmB,EAAE,aAAa,KAAK,UAAU,CAAC,OAAO,EAAE;4BAC3D,cAAc,EAAE,UAAU,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC;yBACzD;qBACF,CAAC;iBACH,CAAC,CAAC;gBACH,OAAO,EAAC,KAAK,OAAA,EAAC,CAAC;aAChB;SACF;;;;;;;;;;;;;;;QAgBD,oCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC/F;;;;;;;;;;;;;;;QAgBD,kCAAI,GAAJ,UAAK,gBAAwB,EAAE,oBAA4B;YACzD,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACpG;;;;;;;;;;;;;;;QAgBD,oCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACpG;;;;;;;;;;;;;;;QAgBD,qCAAO,GAAP,UAAQ,gBAAwB,EAAE,oBAA4B;YAC5D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC/F;;;;;;;;;;;;;;;QAgBD,sCAAQ,GAAR,UAAS,gBAAwB,EAAE,oBAA4B;YAC7D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC9F;;;;;;;;;;;;;;;QAgBD,oCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACnG;;;;;;;;;;;;;;QAeD,mCAAK,GAAL,UAAM,gBAAwB,EAAE,oBAA4B;YAC1D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAC1B,gBAAgB,CAAC;iBACf,KAAK,CAAC,KAAK,CAAC;iBACZ,OAAO,CAAC,MAAM,CAAC;iBACf,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACrC;;;;;;;;;;;;;;QAeD,oCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC/F;QACH,0BAAC;KAAA;;ICxQD;;;;;;;;IAUA;;;;;;;;;;;;;IAiBA,IAAMA,QAAM,GAAG,OAAO,CAAC;;;;AAKvB;QAAA;YAEU,SAAI,GAAG,CAAC,CAAC;SAwQlB;;;;;;;;;;;;QA1PC,yCAAS,GAAT,UAAU,OAAsB;YAE9B,IAAM,gBAAgB,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;YAE/C,IAAI,gBAAgB;oBACd,gBAAgB,CAAC,aAAa,KAAK,gBAAgB,CAAC,YAAY,CAAC,EACrE;gBACA,IAAI,CAAC,IAAI,GAAG,gBAAgB,CAAC,YAAY,CAAC;gBAC1C,IAAI,IAAI,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;oBACjD,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;iBACf;aACF;SACF;;;;;;;;;;;;;;;;;;;;;QAuBD,wCAAQ,GAAR,UAAS,YAAoB,EAAE,oBAA4B;YAA3D,iBAkEC;YAjEC,IAAM,SAAS,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvD,IAAM,mBAAmB,GAAGA,QAAM,EAAE,CAAC,OAAO,EAAE,CAAC;YAE/C,IAAM,WAAW,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,IAAI,GAAG,KAAK,GAAG,KAAI,CAAC,IAAI,GAAA,CAAC,CAAC;YAChH,IAAM,YAAY,GAAG,WAAW,CAAC,GAAG,CAAC,UAAC,YAAY,IAAK,OAAAA,QAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,SAAS,CAAC,CAAC,OAAO,EAAE,GAAA,CAAC,CAAC;YACjH,IAAM,WAAW,GAAGA,QAAM,CAAC,YAAY,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,IAAI,YAAY,GAAA,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YAElG,IAAM,QAAQ,GAAG,mBAAmB,IAAI,SAAS,CAAC,OAAO,EAAE,IAAI,mBAAmB,IAAIA,QAAM,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE;kBAC3HA,QAAM,CAAC,YAAY,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,IAAI,mBAAmB,GAAA,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE;kBACpF,IAAI,CAAC;YAGT,IAAM,YAAY,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAC3D,IAAM,QAAQ,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAClD,IAAM,aAAa,GAAG,oBAAoB,KAAK,IAAI,IAAI,oBAAoB,KAAK,SAAS;kBACrF,oBAAoB;kBACpBA,QAAM,CAAC,YAAY,CAAC,MAAM,CAAC,UAAC,KAAK,IAAK,OAAA,KAAK,IAAI,oBAAoB,GAAA,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC;YAE1F,IAAM,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;iBACtD,IAAI,CAAC,CAAC,CAAC;iBACP,GAAG,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,IAAI,GAAG,KAAK,GAAA,CAAC;iBAClC,GAAG,CAAC,UAAC,KAAK;gBACT,OAAO,EAAC,KAAK,EAAE,WAAW,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,EAAC,CAAC;aACnF,CAAC,CAAC;YAEL,OAAO;gBACL,QAAQ,EAAE,QAAQ;gBAClB,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC;gBAClC,UAAU,EAAE,WAAW;gBACvB,UAAU,EAAE;oBACV,KAAK,EAAE,YAAY,CAAC,OAAO,EAAE;oBAC7B,SAAS,EAAE,WAAS,YAAY,CAAC,MAAM,CAAC,KAAK,CAAG;oBAChD,OAAO,EAAE,EAAE;iBACZ;gBACD,QAAQ,EAAE;oBACR,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE;oBAC1B,SAAS,EAAE,WAAS,SAAS,CAAC,MAAM,CAAC,IAAI,CAAG;oBAC5C,OAAO,EAAE,EAAE;iBACZ;gBACD,WAAW,EAAE;oBACX,KAAK,EAAE,QAAQ,CAAC,OAAO,EAAE;oBACzB,SAAS,EAAE,WAAS,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAG;oBAC5C,OAAO,EAAE,EAAE;iBACZ;gBACD,IAAI,MAAA;aACL,CAAC;YAEF,SAAS,YAAY,CAAC,WAAW;gBAM/B,IAAM,YAAY,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;gBACnE,OAAO;oBACL,OAAO,EAAE,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC;oBAClC,SAAS,EAAE,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC;oBACrC,KAAK,EAAE,YAAY,CAAC,OAAO,EAAE;oBAC7B,OAAO,EAAE;wBACP,iBAAiB,EAAE,WAAW,KAAK,YAAY,CAAC,OAAO,EAAE;wBACzD,mBAAmB,EAAE,aAAa,KAAK,YAAY,CAAC,OAAO,EAAE;wBAC7D,cAAc,EAAE,QAAQ,KAAK,YAAY,CAAC,OAAO,EAAE;qBACpD;iBACF,CAAC;aACH;SACF;;;;;;;;;;;;;;;QAgBD,sCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC9G;;;;;;;;;;;;;;;QAgBD,oCAAI,GAAJ,UAAK,gBAAwB,EAAE,oBAA4B;YACzD,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,EAAE,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACnH;;;;;;;;;;;;;;;QAgBD,sCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC/G;;;;;;;;;;;;;;;QAgBD,uCAAO,GAAP,UAAQ,gBAAwB,EAAE,oBAA4B;YAC5D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC1G;;;;;;;;;;;;;;;;;QAkBD,wCAAQ,GAAR,UAAS,gBAAwB,EAAE,oBAA4B;YAC7D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC/F;;;;;;;;;;;;;;;;;QAkBD,sCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACpG;;;;;;;;;;;;;;QAeD,qCAAK,GAAL,UAAM,gBAAwB,EAAE,oBAA4B;YAC1D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC;iBAC1C,KAAK,CAAC,MAAM,CAAC;iBACb,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACrC;;;;;;;;;;;;;;QAeD,sCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAChG;QACH,4BAAC;KAAA;;IC1SD;;;;;;;;IAUA;;;;;;;;;;;;;IAiBA,IAAMA,QAAM,GAAG,OAAO,CAAC;;;;AAKvB;QAAA;SAuOC;;;;;;;QA/NC,wCAAS,GAAT;;QAEE,OAAsB,KACd;;;;;;;;;;;;;;;;;;;;QAqBV,uCAAQ,GAAR,UAAS,YAAoB,EAAE,oBAA4B;YACzD,IAAM,SAAS,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAEvD,IAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7B,IAAM,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEnC,IAAM,YAAY,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAC3D,IAAM,QAAQ,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;YAClD,IAAM,WAAW,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;YACpE,IAAM,aAAa,GAAG,oBAAoB,KAAK,IAAI,IAAI,oBAAoB,KAAK,SAAS;kBACrF,oBAAoB;kBACpBA,QAAM,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,CAAC;YAE5D,OAAO;gBACL,QAAQ,EAAE,OAAO;gBACjB,SAAS,EAAE,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC;gBACnC,UAAU,EAAE,WAAW;gBACvB,UAAU,EAAE;oBACV,KAAK,EAAE,YAAY,CAAC,OAAO,EAAE;oBAC7B,SAAS,EAAE,WAAS,YAAY,CAAC,MAAM,CAAC,MAAM,CAAG;oBACjD,OAAO,EAAE,EAAE;iBACZ;gBACD,QAAQ,EAAE;oBACR,KAAK,EAAE,SAAS,CAAC,OAAO,EAAE;oBAC1B,SAAS,EAAE,WAAS,SAAS,CAAC,MAAM,CAAC,MAAM,CAAG;oBAC9C,OAAO,EAAE,EAAE;iBACZ;gBACD,WAAW,EAAE;oBACX,KAAK,EAAE,QAAQ,CAAC,OAAO,EAAE;oBACzB,SAAS,EAAE,WAAS,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAG;oBAC7C,OAAO,EAAE,EAAE;iBACZ;gBACD,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC;aAClC,CAAC;YAEF,SAAS,WAAW,CAAC,SAAS;gBAE5B,IAAM,aAAa,GAAGA,QAAM,EAAE,CAAC;gBAC/B,IAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,UAAC,YAAY;oBAC3C,IAAM,WAAW,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,GAAG,aAAa,CAAC,MAAM,IAAI,YAAY,EAAE,QAAQ,CAAC,CAAC;oBACvG,OAAO;wBACL,OAAO,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC;wBAClC,SAAS,EAAE,WAAW,CAAC,MAAM,CAAC,UAAU,CAAC;wBACzC,KAAK,EAAE,WAAW,CAAC,OAAO,EAAE;wBAC5B,OAAO,EAAE;4BACP,iBAAiB,EAAE,WAAW,KAAK,WAAW,CAAC,OAAO,EAAE;4BACxD,mBAAmB,EAAE,aAAa,KAAK,WAAW,CAAC,OAAO,EAAE;4BAC5D,cAAc,EAAE,WAAW,CAAC,MAAM,CAAC,aAAa,EAAE,OAAO,CAAC;yBAC3D;qBACF,CAAC;iBACH,CAAC,CAAC;gBACH,OAAO,EAAC,KAAK,OAAA,EAAC,CAAC;aAChB;SACF;;;;;;;;;;;;;;;QAgBD,qCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAChG;;;;;;;;;;;;;;;QAgBD,mCAAI,GAAJ,UAAK,gBAAwB,EAAE,oBAA4B;YACzD,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACrG;;;;;;;;;;;;;;;QAgBD,qCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACrG;;;;;;;;;;;;;;;;;;QAmBD,sCAAO,GAAP,UAAQ,gBAAwB,EAAE,oBAA4B;YAC5D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAChG;;;;;;;;;;;;;;;QAgBD,uCAAQ,GAAR,UAAS,gBAAwB,EAAE,oBAA4B;YAC7D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAClG;;;;;;;;;;;;;;;QAgBD,qCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACvG;;;;;;;;;;;;;;QAeD,oCAAK,GAAL,UAAM,gBAAwB,EAAE,oBAA4B;YAC1D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC9F;;;;;;;;;;;;;;QAeD,qCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAChG;QACH,2BAAC;KAAA;;ICvQD;;;;;;;;IAUA;;;;;;;;;;;;;IAkBA,IAAMA,QAAM,GAAG,OAAO,CAAC;;;;AAKvB;QAAA;SA4QC;;;;;;;;;;;QAhQgB,oCAAgB,GAA/B,UAAgC,gBAAwB;;YAEtD,IAAM,WAAW,IAAI,IAAI,CAAC,KAAK,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC;YAC5E,OAAOA,QAAM,CAAC,EAAC,IAAI,EAAE,WAAW,EAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;SACpD;;;;;;;QAQD,uCAAS,GAAT;;QAEE,OAAsB,KACd;;;;;;;;;;;;;;;;;;;;QAqBV,sCAAQ,GAAR,UAAS,YAAoB,EAAE,oBAA4B;YACzD,IAAM,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1B,IAAM,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAEtC,IAAM,SAAS,GAAGA,QAAM,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YACvD,IAAM,SAAS,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAC;YAErE,IAAM,UAAU,GAAG,SAAS,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;YACxC,IAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,EAAE,CAAC;YAClC,IAAM,WAAW,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;YACxC,IAAM,aAAa,GAAG,oBAAoB,KAAK,IAAI,IAAI,oBAAoB,KAAK,SAAS;kBACrF,oBAAoB;kBACpBA,QAAM,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,CAAC;YAE3D,OAAO;gBACL,QAAQ,EAAE,MAAM;gBAChB,SAAS,EAAK,QAAQ,SAAI,UAAY;gBACtC,UAAU,EAAE,WAAW;gBACvB,UAAU,EAAE;oBACV,KAAK,EAAEA,QAAM,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE;oBACxD,SAAS,EAAE,YAAS,QAAQ,GAAG,EAAE,WAAI,QAAQ,GAAG,CAAC,CAAE;oBACnD,OAAO,EAAE,EAAE;iBACZ;gBACD,WAAW,EAAE;oBACX,KAAK,EAAEA,QAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC,OAAO,EAAE;oBACnD,SAAS,EAAE,YAAS,UAAU,GAAG,CAAC,WAAI,UAAU,GAAG,EAAE,CAAE;oBACvD,OAAO,EAAE,EAAE;iBACZ;gBACD,IAAI,EAAE,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC5C,CAAC;YAEF,SAAS,UAAU,CAAC,SAAS;gBAE3B,IAAM,aAAa,GAAGA,QAAM,EAAE,CAAC;gBAC/B,IAAM,KAAK,GAAG,aAAa,CAAC,GAAG,CAAC,UAAC,YAAY;oBAC3C,IAAM,UAAU,GAAGA,QAAM,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,GAAG,aAAa,CAAC,MAAM,IAAI,YAAY,EAAE,OAAO,CAAC,CAAC;oBACrG,OAAO;wBACL,OAAO,EAAE,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC;wBAClC,KAAK,EAAE,UAAU,CAAC,OAAO,EAAE;wBAC3B,OAAO,EAAE;4BACP,iBAAiB,EAAE,WAAW,KAAK,UAAU,CAAC,OAAO,EAAE;4BACvD,mBAAmB,EAAE,aAAa,KAAK,UAAU,CAAC,OAAO,EAAE;4BAC3D,cAAc,EAAE,UAAU,CAAC,MAAM,CAAC,aAAa,EAAE,MAAM,CAAC;yBACzD;qBACF,CAAC;iBACH,CAAC,CAAC;gBACH,OAAO,EAAC,KAAK,OAAA,EAAC,CAAC;aAChB;SACF;;;;;;;;;;;;;;;;;;QAmBD,oCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC/F;;;;;;;;;;;;;;;;;;QAmBD,kCAAI,GAAJ,UAAK,gBAAwB,EAAE,oBAA4B;YACzD,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACpG;;;;;;;;;;;;;;;;;;QAmBD,oCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACpG;;;;;;;;;;;;;;;;;;QAmBD,qCAAO,GAAP,UAAQ,gBAAwB,EAAE,oBAA4B;YAC5D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAC/F;;;;;;;;;;;;;;;;;;QAmBD,sCAAQ,GAAR,UAAS,gBAAwB,EAAE,oBAA4B;YAC7D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SAChG;;;;;;;;;;;;;;;;;;QAmBD,oCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAACA,QAAM,CAAC,gBAAgB,CAAC,CAAC,QAAQ,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE,oBAAoB,CAAC,CAAC;SACrG;;;;;;;;;;;;;;QAeD,mCAAK,GAAL,UAAM,gBAAwB,EAAE,oBAA4B;YAC1D,OAAO,IAAI,CAAC,QAAQ,CAClB,mBAAmB,CAAC,gBAAgB,CAAC,gBAAgB,CAAC;iBACnD,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC;iBACf,KAAK,CAAC,MAAM,CAAC;iBACb,OAAO,EAAE,EACZ,oBAAoB,CACrB,CAAC;SACH;;;;;;;;;;;;;;QAeD,oCAAM,GAAN,UAAO,gBAAwB,EAAE,oBAA4B;YAC3D,OAAO,IAAI,CAAC,QAAQ,CAClB,mBAAmB,CAAC,gBAAgB,CAAC,gBAAgB,CAAC;iBACnD,OAAO,CAAC,MAAM,CAAC;iBACf,OAAO,EAAE,EACZ,oBAAoB,CACrB,CAAC;SACH;QACH,0BAAC;KAAA;;IC7SD;;;;;;;;IAoCA;;;;;;;;;;;;;IAaA,IAAMA,QAAM,GAAG,OAAO,CAAC;;;;;;;IAUvB,IAAM,4BAA4B,GAAG;QACnC,WAAW,EAAE,QAAQ;QACrB,WAAW,EAAE,QAAQ;QACrB,YAAY,EAAE,SAAS;QACvB,SAAS,EAAE,MAAM;QACjB,MAAM,EAAE,QAAQ;QAChB,KAAK,EAAE,OAAO;QACd,MAAM,EAAE,QAAQ;QAChB,MAAM,EAAE,QAAQ;QAChB,UAAU,EAAE,UAAU;QACtB,QAAQ,EAAE,QAAQ;QAClB,OAAO,EAAE,SAAS;QAClB,IAAI,EAAE,MAAM;QACZ,EAAE,EAAE,QAAQ;QACZ,EAAE,EAAE,UAAU;QACd,EAAE,EAAE,OAAO;QACX,EAAE,EAAE,QAAQ;QACZ,EAAE,EAAE,QAAQ;QACZ,EAAE,EAAE,MAAM;QACV,EAAE,EAAE,SAAS;QACb,EAAE,EAAE,QAAQ;KACb,CAAC;;;;;;;;;IAWF,IAAM,KAAK,GAAG;QACZ,QAAQ;QACR,MAAM;QACN,KAAK;QACL,OAAO;QACP,MAAM;KACP,CAAC;;;;AAoBF;;;;;;;;;;;;;;;;;;;;;QAwKE,mCAAoB,WAAuB,EACvB,OAAe,EACf,YAA8B;;QAE9B,kBAAuC;;QAEvC,mBAAyC;;QAEzC,iBAAqC;;QAErC,kBAAuC;;QAEvC,oBAA2C;YAZ3C,gBAAW,GAAX,WAAW,CAAY;YACvB,YAAO,GAAP,OAAO,CAAQ;YACf,iBAAY,GAAZ,YAAY,CAAkB;YAE9B,uBAAkB,GAAlB,kBAAkB,CAAqB;YAEvC,wBAAmB,GAAnB,mBAAmB,CAAsB;YAEzC,sBAAiB,GAAjB,iBAAiB,CAAoB;YAErC,uBAAkB,GAAlB,kBAAkB,CAAqB;YAEvC,yBAAoB,GAApB,oBAAoB,CAAuB;;;;;;YA7KvD,aAAQ,GAA2B,EAAE,CAAC;;;;;YAWtC,cAAS,GAAG;gBAClB,MAAM,EAAE,OAAO;gBACf,OAAO,EAAE,KAAK;gBACd,KAAK,EAAE,MAAM;gBACb,MAAM,EAAE,QAAQ;aACjB,CAAC;;;;;YAKM,kBAAa,GAAG;gBACtB,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,KAAK;gBACb,KAAK,EAAE,OAAO;gBACd,OAAO,EAAE,MAAM;aAChB,CAAC;;;;;;YAMM,aAAQ,GAAmB,EAAE,CAAC;;;;;YAsB7B,WAAM,GAAG,IAAIO,iBAAY,EAA6B,CAAC;;;;;;;YAQhE,kBAAa,GAAyC;gBACpD,IAAI;gBACJ,iBAAiB;aAClB,CAAC;;;;;;YAOF,YAAO,GAAiD,MAAM,CAAC;;;;;;;;;;;;;YAc/D,YAAO,GAAiD,QAAQ,CAAC;;;;;;YAOjE,eAAU,GAAG,CAAC,CAAC;;;;;;;YAQf,mBAAc,GAAG;gBACf,IAAI;gBACJ,kBAAkB;aACnB,CAAC;;;;;YAOF,iBAAY,GAA0D,cAAM,OAAA,IAAI,GAAA,CAAA;;;;;;;;YAgBhF,cAAS,GAAiD,KAAK,CAAC;;;;;;;YAShE,gBAAW,GAAG;gBACZ,IAAI;gBACJ,gBAAgB;aACjB,CAAC;YAoCA,IAAI,CAAC,oBAAoB,GAAG;gBAC1B,IAAI,EAAE,kBAAkB;gBACxB,KAAK,EAAE,mBAAmB;gBAC1B,GAAG,EAAE,iBAAiB;gBACtB,IAAI,EAAE,kBAAkB;gBACxB,MAAM,EAAE,oBAAoB;aAC7B,CAAC;SACH;sCA7LU,yBAAyB;QAqMpC,sBAAY,4CAAK;;;;;;;iBAAjB,UAAkB,KAA4B;gBAC5C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;aAC7C;;;WAAA;QAKD,sBAAI,4CAAK;;;;iBAAT;gBACE,OAAO,IAAI,CAAC,MAAM,CAAC;aACpB;;;;;iBAMD,UAAU,KAAQ;gBAChB,IAAI,IAAI,CAAC,MAAM,KAAK,KAAK,EAAE;oBACzB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;oBACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;oBACzG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;oBACrC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,sBAAsB,CAAI,KAAK,CAAC,CAAC,CAAC;iBACxD;aACF;;;WAbA;QAkBD,sBAAI,8CAAO;;;;iBAAX;gBACE,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACtD;;;WAAA;;;;;;;;;;;;;;;QAgBO,qDAAiB,GAAzB,UAA0B,KAA4B;YAAtD,iBAgBC;YAfC,IAAI,IAAI,CAAC,YAAY,EAAE;gBACrB,KAAK,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,GAAG;oBAC9B,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAC,UAAsB;wBACnC,IAAM,QAAQ,GAAG,CAAC,KAAI,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;wBAChE,UAAU,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,QAAQ,CAAC;wBACnD,IAAI,QAAQ,EAAE;4BACZ,UAAU,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC;yBAC5C;wBACD,OAAO,UAAU,CAAC;qBACnB,CAAC,CAAC;oBACH,OAAO,GAAG,CAAC;iBACZ,CAAC,CAAC;aACJ;YAED,OAAO,KAAK,CAAC;SACd;;;;;QAMO,mDAAe,GAAvB;YAAA,iBAMC;YALC,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;gBAC7B,KAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC,IAAI,CAACW,cAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;oBAC3D,KAAI,CAAC,WAAW,CAAC,aAAa,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC,KAAK,EAAE,CAAC;iBAC1E,CAAC,CAAC;aACJ,CAAC,CAAC;SACJ;;;;;QAMO,gDAAY,GAApB;YACE,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACtD;YACD,IAAI,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC5B,OAAO,IAAI,CAAC,SAAS,CAAC;aACvB;YACD,OAAOlB,QAAM,EAAE,CAAC,OAAO,EAAE,CAAC;SAC3B;;;;;;QAOO,gDAAY,GAApB;YACE,IAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,IAAI,QAAQ,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC;YAC7G,OAAO,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;;;;;QAMO,2CAAO,GAAf;YACE,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,UAAC,SAAS,IAAK,OAAA,SAAS,EAAE,GAAA,CAAC,CAAC;SACnD;;;;;;;;;QAUD,+CAAW,GAAX,UAAY,OAAsB;YAChC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC,UAAC,QAAyB,IAAK,OAAA,QAAQ,CAAC,SAAS,CAAC,OAAO,CAAC,GAAA,CAAC,CAAC;YAE7G,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;aAC7G;SACF;;;;;;QAOD,4CAAQ,GAAR;YACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACzG;;;;;;;;;;;;QAaD,gDAAY,GAAZ,UAAa,UAAsB;YACjC,IAAI,UAAU,CAAC,OAAO,CAAC,mBAAmB,CAAC,EAAE;gBAC3C,OAAO;aACR;YAED,IAAI,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAEpD,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,QAAQ,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBACvD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBAClE,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;aAC3B;YAED,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAE1F,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;;;;;;;;;QAUD,gDAAY,GAAZ;YACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAClH,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;;;;;;;;;QAUD,8CAAU,GAAV;YACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;SACrI;;;;;;;;;QAUD,iDAAa,GAAb;YACE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YACnH,IAAI,CAAC,OAAO,EAAE,CAAC;SAChB;;;;;;QAOD,kDAAc,GAAd,UAAe,MAAqB;YAClC,IAAM,YAAY,GAAG,4BAA4B,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YAE9D,IAAI,YAAY,EAAE;gBAChB,IAAM,aAAa,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACtE,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;gBAE/E,IAAI,CAAC,eAAe,EAAE,CAAC;;gBAEvB,MAAM,CAAC,cAAc,EAAE,CAAC;aACzB;SACF;;;;;QAMD,oDAAgB,GAAhB,UAAiB,EAAsB;YACrC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACxB;;;;;QAMD,qDAAiB,GAAjB,UAAkB,EAAc;YAC9B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;SACxB;;;;;QAMD,8CAAU,GAAV,UAAW,KAAQ;YACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB;;;oBA3QgCS,eAAU;oBACdU,WAAM;oBACD,aAAa;oBAEP,mBAAmB;oBAElB,oBAAoB;oBAEtB,kBAAkB;oBAEjB,mBAAmB;oBAEjB,qBAAqB;;QAvH/DT;YADCC,WAAM,EAAE;iEACuD;QAQhED;YADCE,UAAK,EAAE;wEAIN;QAOFF;YADCE,UAAK,EAAE;kEACuD;QAc/DF;YADCE,UAAK,EAAE;kEACyD;QAOjEF;YADCE,UAAK,EAAE;qEACO;QAQfF;YADCE,UAAK,EAAE;yEAIN;QAOFF;YADCE,UAAK,EAAE;uEACwE;QAMhFF;YADCE,UAAK,EAAE;oEACU;QAUlBF;YADCE,UAAK,EAAE;oEACwD;QAShEF;YADCE,UAAK,EAAE;sEAIN;QAlJS,yBAAyB;YAdrCQ,cAAS,CAAC;gBACT,eAAe,EAAEC,4BAAuB,CAAC,MAAM;gBAC/C,mBAAmB,EAAE,KAAK;gBAC1B,SAAS,EAAE;oBACT;wBACE,OAAO,EAAEN,uBAAiB;wBAC1B,WAAW,EAAE,2BAAyB;wBACtC,KAAK,EAAE,IAAI;qBACZ;iBACF;gBACD,QAAQ,EAAE,qBAAqB;gBAE/B,4pFAAmD;;aACpD,CAAC;WACW,yBAAyB,CAqbrC;QAAD,gCAAC;KArbD,IAqbC;IAED;IACA,SAAS,QAAQ,CAAC,KAAU;QAC1B,OAAO,CAAC,OAAO,KAAK,KAAK,WAAW,MAAM,KAAK,KAAK,IAAI,CAAC,CAAC;KAC3D;;IC/iBD;;;;;;;;IAkBA;;;;AAgBA;QAAA;SACC;QADY,sBAAsB;YAZlCV,aAAQ,CAAC;gBACR,YAAY,EAAE,CAAC,yBAAyB,CAAC;gBACzC,OAAO,EAAE,CAACY,mBAAY,CAAC;gBACvB,OAAO,EAAE,CAAC,yBAAyB,CAAC;gBACpC,SAAS,EAAE;oBACT,mBAAmB;oBACnB,oBAAoB;oBACpB,kBAAkB;oBAClB,mBAAmB;oBACnB,qBAAqB;iBACtB;aACF,CAAC;WACW,sBAAsB,CAClC;QAAD,6BAAC;KADD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}