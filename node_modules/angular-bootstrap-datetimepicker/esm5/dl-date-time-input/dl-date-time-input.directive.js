import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, HostListener, Inject, Input, Output, Renderer2 } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, Validators, } from '@angular/forms';
import * as _moment from 'moment';
import { DL_DATE_TIME_DISPLAY_FORMAT, DL_DATE_TIME_INPUT_FORMATS, DlDateAdapter } from '../core/public-api';
import { DlDateTimeInputChange } from './dl-date-time-input-change';
/**
 * @internal
 */
var moment = _moment;
/**
 *  This directive allows the user to enter dates, using the keyboard, into an input box and
 *  angular will then store a date value in the model.
 *
 *  The input format(s), display format, and model format are independent and fully customizable.
 */
var DlDateTimeInputDirective = /** @class */ (function () {
    /**
     * Constructs a new instance of this directive.
     * @param _renderer
     *  reference to the renderer.
     * @param _elementRef
     *  reference to this element.
     * @param _dateAdapter
     *  date adapter for the date type in the model.
     * @param _displayFormat
     *  from `DL_DATE_TIME_DISPLAY_FORMAT`, which defines the format to use for a valid date/time value.
     * @param _inputFormats
     *  from `DL_DATE_TIME_INPUT_FORMATS`, which defines the input formats that allowed as valid date/time values.
     *  NB: moment is always in strict parse mode for this directive.
     */
    function DlDateTimeInputDirective(_renderer, _elementRef, _dateAdapter, _displayFormat, _inputFormats) {
        var _this = this;
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this._dateAdapter = _dateAdapter;
        this._displayFormat = _displayFormat;
        this._inputFormats = _inputFormats;
        /* tslint:disable:member-ordering */
        this._filterValidator = function (control) {
            // @ts-ignore
            return (_this._inputFilter || (function () { return true; }))(_this._value) ?
                null : { 'dlDateTimeInputFilter': { 'value': control.value } };
        };
        this._inputFilter = function () { return true; };
        this._isValid = true;
        this._parseValidator = function () {
            return _this._isValid ?
                null : { 'dlDateTimeInputParse': { 'text': _this._elementRef.nativeElement.value } };
        };
        this._changed = [];
        this._touched = [];
        this._validator = Validators.compose([this._parseValidator, this._filterValidator]);
        this._onValidatorChange = function () { };
        this._value = undefined;
        /**
         * Emits when a `change` event when date/time is selected or
         * the value of the date/time picker changes.
         **/
        this.dateChange = new EventEmitter();
    }
    DlDateTimeInputDirective_1 = DlDateTimeInputDirective;
    Object.defineProperty(DlDateTimeInputDirective.prototype, "dlDateTimeInputFilter", {
        /**
         * Set a function used to determine whether or not the `value` entered by the user is allowed.
         * @param inputFilterFunction
         *   a function that returns `true` if the `value` entered by the user is allowed, otherwise `false`.
         */
        set: function (inputFilterFunction) {
            this._inputFilter = inputFilterFunction || (function () { return true; });
            this._onValidatorChange();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DlDateTimeInputDirective.prototype, "value", {
        /* tslint:enable:member-ordering */
        /**
         * Returns `D` value of the date/time input or `undefined` | `null` if no value is set.
         **/
        get: function () {
            return this._value;
        },
        /**
         * Set the value of the date/time input to a value of `D` | `undefined` | `null`;
         * @param newValue
         *  the new value of the date/time input
         */
        set: function (newValue) {
            var _this = this;
            if (newValue !== this._value) {
                this._value = newValue;
                this._changed.forEach(function (onChanged) { return onChanged(_this._value); });
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emit a `change` event when the value of the input changes.
     */
    DlDateTimeInputDirective.prototype._onChange = function () {
        this.dateChange.emit(new DlDateTimeInputChange(this._value));
    };
    /**
     * Format the input text using {@link DL_DATE_TIME_DISPLAY_FORMAT} and mark the control as touched.
     */
    DlDateTimeInputDirective.prototype._onBlur = function () {
        if (this._value) {
            this._setElementValue(this._value);
        }
        this._touched.forEach(function (onTouched) { return onTouched(); });
    };
    /**
     * Parse the user input into a possibly valid date.
     * The model value is not set if the input is NOT one of the {@link DL_DATE_TIME_INPUT_FORMATS}.
     * @param value
     *   Value of the input control.
     */
    DlDateTimeInputDirective.prototype._onInput = function (value) {
        var testDate = value === null || value === undefined || value === ''
            ? undefined
            : moment(value, this._inputFormats, true);
        this._isValid = testDate && testDate.isValid();
        this.value = this._isValid ? this._dateAdapter.fromMilliseconds(testDate.valueOf()) : undefined;
    };
    /**
     * @internal
     */
    DlDateTimeInputDirective.prototype._setElementValue = function (value) {
        if (value !== null && value !== undefined) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'value', moment(value).format(this._displayFormat));
        }
    };
    /**
     * @internal
     */
    DlDateTimeInputDirective.prototype.registerOnChange = function (onChange) {
        this._changed.push(onChange);
    };
    /**
     * @internal
     */
    DlDateTimeInputDirective.prototype.registerOnTouched = function (onTouched) {
        this._touched.push(onTouched);
    };
    /**
     * @internal
     */
    DlDateTimeInputDirective.prototype.registerOnValidatorChange = function (validatorOnChange) {
        this._onValidatorChange = validatorOnChange;
    };
    /**
     * @internal
     */
    DlDateTimeInputDirective.prototype.setDisabledState = function (isDisabled) {
        this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
    };
    /**
     * @internal
     */
    DlDateTimeInputDirective.prototype.validate = function (control) {
        return this._validator(control);
    };
    /**
     * @internal
     */
    DlDateTimeInputDirective.prototype.writeValue = function (value) {
        this._isValid = true;
        this.value = value;
        this._setElementValue(value);
    };
    var DlDateTimeInputDirective_1;
    DlDateTimeInputDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: DlDateAdapter },
        { type: String, decorators: [{ type: Inject, args: [DL_DATE_TIME_DISPLAY_FORMAT,] }] },
        { type: Array, decorators: [{ type: Inject, args: [DL_DATE_TIME_INPUT_FORMATS,] }] }
    ]; };
    tslib_1.__decorate([
        Output()
    ], DlDateTimeInputDirective.prototype, "dateChange", void 0);
    tslib_1.__decorate([
        Input()
    ], DlDateTimeInputDirective.prototype, "dlDateTimeInputFilter", null);
    tslib_1.__decorate([
        HostListener('change')
    ], DlDateTimeInputDirective.prototype, "_onChange", null);
    tslib_1.__decorate([
        HostListener('blur')
    ], DlDateTimeInputDirective.prototype, "_onBlur", null);
    tslib_1.__decorate([
        HostListener('input', ['$event.target.value'])
    ], DlDateTimeInputDirective.prototype, "_onInput", null);
    DlDateTimeInputDirective = DlDateTimeInputDirective_1 = tslib_1.__decorate([
        Directive({
            selector: 'input[dlDateTimeInput]',
            providers: [
                { provide: NG_VALUE_ACCESSOR, useExisting: DlDateTimeInputDirective_1, multi: true },
                { provide: NG_VALIDATORS, useExisting: DlDateTimeInputDirective_1, multi: true }
            ]
        }),
        tslib_1.__param(3, Inject(DL_DATE_TIME_DISPLAY_FORMAT)),
        tslib_1.__param(4, Inject(DL_DATE_TIME_INPUT_FORMATS))
    ], DlDateTimeInputDirective);
    return DlDateTimeInputDirective;
}());
export { DlDateTimeInputDirective };
//# sourceMappingURL=data:application/json;base64,