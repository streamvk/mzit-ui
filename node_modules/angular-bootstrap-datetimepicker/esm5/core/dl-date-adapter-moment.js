import * as tslib_1 from "tslib";
import * as _moment from 'moment';
import { DlDateAdapter } from './dl-date-adapter';
/**
 * Work around for moment namespace conflict when used with webpack and rollup.
 * See https://github.com/dherges/ng-packagr/issues/163
 *
 * Depending on whether rollup is used, moment needs to be imported differently.
 * Since Moment.js doesn't have a default export, we normally need to import using
 * the `* as`syntax.
 *
 * rollup creates a synthetic default module and we thus need to import it using
 * the `default as` syntax.
 *
 * @internal
 **/
var moment = _moment;
/**
 * Adapts `moment` to be usable as a date by date/time components that work with dates.
 **/
var DlDateAdapterMoment = /** @class */ (function (_super) {
    tslib_1.__extends(DlDateAdapterMoment, _super);
    function DlDateAdapterMoment() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Create a new instance of a `moment` type from milliseconds.
     * @param milliseconds
     *  a time value as milliseconds (local time zone)
     * @returns
     *  an instance of `moment` for the specified moment in time.
     */
    DlDateAdapterMoment.prototype.fromMilliseconds = function (milliseconds) {
        return moment(milliseconds);
    };
    /**
     * Returns a moment in time value as milliseconds (local time zone).
     * @param value
     *  a moment or `null`.
     * @returns
     *  a `moment.valueOf()` result for the specified `moment` or `null`
     */
    DlDateAdapterMoment.prototype.toMilliseconds = function (value) {
        return (value) ? value.valueOf() : undefined;
    };
    return DlDateAdapterMoment;
}(DlDateAdapter));
export { DlDateAdapterMoment };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGwtZGF0ZS1hZGFwdGVyLW1vbWVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItYm9vdHN0cmFwLWRhdGV0aW1lcGlja2VyLyIsInNvdXJjZXMiOlsiY29yZS9kbC1kYXRlLWFkYXB0ZXItbW9tZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEtBQUssT0FBTyxNQUFNLFFBQVEsQ0FBQztBQUVsQyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFFaEQ7Ozs7Ozs7Ozs7OztJQVlJO0FBQ0osSUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBRXZCOztJQUVJO0FBQ0o7SUFBeUMsK0NBQXFCO0lBQTlEOztJQXVCQSxDQUFDO0lBckJDOzs7Ozs7T0FNRztJQUNILDhDQUFnQixHQUFoQixVQUFpQixZQUFvQjtRQUNuQyxPQUFPLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0gsNENBQWMsR0FBZCxVQUFlLEtBQW9CO1FBQ2pDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUM7SUFDL0MsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQXZCRCxDQUF5QyxhQUFhLEdBdUJyRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIF9tb21lbnQgZnJvbSAnbW9tZW50JztcbmltcG9ydCB7TW9tZW50fSBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHtEbERhdGVBZGFwdGVyfSBmcm9tICcuL2RsLWRhdGUtYWRhcHRlcic7XG5cbi8qKlxuICogV29yayBhcm91bmQgZm9yIG1vbWVudCBuYW1lc3BhY2UgY29uZmxpY3Qgd2hlbiB1c2VkIHdpdGggd2VicGFjayBhbmQgcm9sbHVwLlxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kaGVyZ2VzL25nLXBhY2thZ3IvaXNzdWVzLzE2M1xuICpcbiAqIERlcGVuZGluZyBvbiB3aGV0aGVyIHJvbGx1cCBpcyB1c2VkLCBtb21lbnQgbmVlZHMgdG8gYmUgaW1wb3J0ZWQgZGlmZmVyZW50bHkuXG4gKiBTaW5jZSBNb21lbnQuanMgZG9lc24ndCBoYXZlIGEgZGVmYXVsdCBleHBvcnQsIHdlIG5vcm1hbGx5IG5lZWQgdG8gaW1wb3J0IHVzaW5nXG4gKiB0aGUgYCogYXNgc3ludGF4LlxuICpcbiAqIHJvbGx1cCBjcmVhdGVzIGEgc3ludGhldGljIGRlZmF1bHQgbW9kdWxlIGFuZCB3ZSB0aHVzIG5lZWQgdG8gaW1wb3J0IGl0IHVzaW5nXG4gKiB0aGUgYGRlZmF1bHQgYXNgIHN5bnRheC5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqKi9cbmNvbnN0IG1vbWVudCA9IF9tb21lbnQ7XG5cbi8qKlxuICogQWRhcHRzIGBtb21lbnRgIHRvIGJlIHVzYWJsZSBhcyBhIGRhdGUgYnkgZGF0ZS90aW1lIGNvbXBvbmVudHMgdGhhdCB3b3JrIHdpdGggZGF0ZXMuXG4gKiovXG5leHBvcnQgY2xhc3MgRGxEYXRlQWRhcHRlck1vbWVudCBleHRlbmRzIERsRGF0ZUFkYXB0ZXI8TW9tZW50PiB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBhIGBtb21lbnRgIHR5cGUgZnJvbSBtaWxsaXNlY29uZHMuXG4gICAqIEBwYXJhbSBtaWxsaXNlY29uZHNcbiAgICogIGEgdGltZSB2YWx1ZSBhcyBtaWxsaXNlY29uZHMgKGxvY2FsIHRpbWUgem9uZSlcbiAgICogQHJldHVybnNcbiAgICogIGFuIGluc3RhbmNlIG9mIGBtb21lbnRgIGZvciB0aGUgc3BlY2lmaWVkIG1vbWVudCBpbiB0aW1lLlxuICAgKi9cbiAgZnJvbU1pbGxpc2Vjb25kcyhtaWxsaXNlY29uZHM6IG51bWJlcik6IE1vbWVudCB7XG4gICAgcmV0dXJuIG1vbWVudChtaWxsaXNlY29uZHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBtb21lbnQgaW4gdGltZSB2YWx1ZSBhcyBtaWxsaXNlY29uZHMgKGxvY2FsIHRpbWUgem9uZSkuXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKiAgYSBtb21lbnQgb3IgYG51bGxgLlxuICAgKiBAcmV0dXJuc1xuICAgKiAgYSBgbW9tZW50LnZhbHVlT2YoKWAgcmVzdWx0IGZvciB0aGUgc3BlY2lmaWVkIGBtb21lbnRgIG9yIGBudWxsYFxuICAgKi9cbiAgdG9NaWxsaXNlY29uZHModmFsdWU6IE1vbWVudCB8IG51bGwpOiBudW1iZXIgfCBudWxsIHtcbiAgICByZXR1cm4gKHZhbHVlKSA/IHZhbHVlLnZhbHVlT2YoKSA6IHVuZGVmaW5lZDtcbiAgfVxufVxuIl19