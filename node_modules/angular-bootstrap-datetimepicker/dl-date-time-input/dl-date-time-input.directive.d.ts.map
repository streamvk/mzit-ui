{"version":3,"file":"dl-date-time-input.directive.d.ts","sources":["dl-date-time-input.directive.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, EventEmitter, Renderer2 } from '@angular/core';\nimport { AbstractControl, ControlValueAccessor, ValidationErrors, Validator } from '@angular/forms';\nimport { DlDateAdapter } from '../core/public-api';\nimport { DlDateTimeInputChange } from './dl-date-time-input-change';\n/**\n *  This directive allows the user to enter dates, using the keyboard, into an input box and\n *  angular will then store a date value in the model.\n *\n *  The input format(s), display format, and model format are independent and fully customizable.\n */\nexport declare class DlDateTimeInputDirective<D> implements ControlValueAccessor, Validator {\n    private _renderer;\n    private _elementRef;\n    private _dateAdapter;\n    private readonly _displayFormat;\n    private readonly _inputFormats;\n    private _filterValidator;\n    private _inputFilter;\n    private _isValid;\n    private _parseValidator;\n    private _changed;\n    private _touched;\n    private _validator;\n    private _onValidatorChange;\n    private _value;\n    /**\n     * Emits when a `change` event when date/time is selected or\n     * the value of the date/time picker changes.\n     **/\n    readonly dateChange: EventEmitter<DlDateTimeInputChange<D>>;\n    /**\n     * Constructs a new instance of this directive.\n     * @param _renderer\n     *  reference to the renderer.\n     * @param _elementRef\n     *  reference to this element.\n     * @param _dateAdapter\n     *  date adapter for the date type in the model.\n     * @param _displayFormat\n     *  from `DL_DATE_TIME_DISPLAY_FORMAT`, which defines the format to use for a valid date/time value.\n     * @param _inputFormats\n     *  from `DL_DATE_TIME_INPUT_FORMATS`, which defines the input formats that allowed as valid date/time values.\n     *  NB: moment is always in strict parse mode for this directive.\n     */\n    constructor(_renderer: Renderer2, _elementRef: ElementRef, _dateAdapter: DlDateAdapter<D>, _displayFormat: string, _inputFormats: string[]);\n    /**\n     * Set a function used to determine whether or not the `value` entered by the user is allowed.\n     * @param inputFilterFunction\n     *   a function that returns `true` if the `value` entered by the user is allowed, otherwise `false`.\n     */\n    dlDateTimeInputFilter: (value: D | null) => boolean;\n    /**\n     * Returns `D` value of the date/time input or `undefined` | `null` if no value is set.\n     **/\n    /**\n    * Set the value of the date/time input to a value of `D` | `undefined` | `null`;\n    * @param newValue\n    *  the new value of the date/time input\n    */\n    value: D;\n    /**\n     * Emit a `change` event when the value of the input changes.\n     */\n    _onChange(): void;\n    /**\n     * Format the input text using {@link DL_DATE_TIME_DISPLAY_FORMAT} and mark the control as touched.\n     */\n    _onBlur(): void;\n    /**\n     * Parse the user input into a possibly valid date.\n     * The model value is not set if the input is NOT one of the {@link DL_DATE_TIME_INPUT_FORMATS}.\n     * @param value\n     *   Value of the input control.\n     */\n    _onInput(value: string | null | undefined): void;\n    /**\n     * @internal\n     */\n    private _setElementValue;\n    /**\n     * @internal\n     */\n    registerOnChange(onChange: (value: any) => void): void;\n    /**\n     * @internal\n     */\n    registerOnTouched(onTouched: () => void): void;\n    /**\n     * @internal\n     */\n    registerOnValidatorChange(validatorOnChange: () => void): void;\n    /**\n     * @internal\n     */\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * @internal\n     */\n    validate(control: AbstractControl): ValidationErrors | null;\n    /**\n     * @internal\n     */\n    writeValue(value: D): void;\n}\n"]}